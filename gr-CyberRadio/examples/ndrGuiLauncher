#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Mon Apr 28 16:21:35 2014

import wx

import os, sys, time, traceback, pickle, psutil, datetime
from twisted.internet import wxreactor
from math import ceil, floor
import json
import netifaces
wxreactor.install()
# import twisted reactor *only after* installing wxreactor
from twisted.internet import reactor, task
from twisted.internet.protocol import ProcessProtocol
import CyberRadioDriver

_DATE="$LastChangedDate: 2016-05-11 14:00:00 -0400 (Wed, 11 May 2016) $"
_REV ="$Revision: 141 $"

class twistedSubprocess(ProcessProtocol):
#	_exe="/usr/local/bin/ndrxxx_demo_gui"
	_exe="/usr/bin/watch"
	def __init__(self,procStartedCallback,procEndedCallback):
		self.procStartedCallback = procStartedCallback
		self.procEndedCallback = procEndedCallback
		self.procStats = None
		self.kill_attempts = 0
	def connectionMade(self):
		self.pid = self.transport.pid
		os.system("renice -20 -p %d"%self.pid)
		self.procStartedCallback(self.pid)
	def outReceived(self, data):
		pass
		for line in data.split("\n"):
			if line:
				print "GUI STDOUT: %s"%line
	def errReceived(self, data):
		for line in data.split("\n"):
			if line:
				print "GUI STDERR: %s"%line
	def inConnectionLost(self):
		pass
#		print "inConnectionLost! stdin is closed! (we probably did it)"
	def outConnectionLost(self):
		pass
#		print "outConnectionLost! The child closed their stdout!"
	def errConnectionLost(self):
		pass
#		print "errConnectionLost! The child closed their stderr."
	def processExited(self, reason):
		pass
		print "processExited! status %s" % (reason.value.exitCode,)
		self.procEndedCallback(reason.value.exitCode)
	def guiEnded(self, reason):
		pass
		print "procEnded! status %s" % (reason.value.exitCode,)
	def start(self,args):
		argList = [self._exe]+args
		reactor.spawnProcess(self,args[0],args,env=os.environ)
	def stop(self,with_prejudice=False):
		try:
			#"HUP", "KILL", "STOP", or "INT".
			if with_prejudice or self.kill_attempts > 5:
				self.transport.signalProcess("KILL")
			else:
				self.transport.signalProcess("INT")
			self.kill_attempts += 1
		except:
			traceback.print_exc()

class logControl(object):
	_name="logCtrl"
	_color=None
	maxLines=1000
	reduceCount=100
	def __init__(self,control,name=None,prefix=False):
		logFolder = "/public/demo-gui/launcherLogs"
		if not os.access(logFolder, os.F_OK):
			os.makedirs(logFolder, 0777)
		self.logfile = open(os.path.join(logFolder, "gui_%s.log"%time.strftime("%y%m%d_%H%M%S")),'w')
		self.name = name if name is not None else self._name
		self.prefix = prefix
		self.ctrl=control
		self.count = 0
	def write(self,string):
		if str(string).strip():
			self.count += 1
			if self.prefix:
				self.ctrl.AppendAndEnsureVisible("%s:  %s"%(self.name,str(string).strip()))
				self.logfile.write("%s:  %s\n"%(self.name,str(string).strip()))
			else:
				self.ctrl.AppendAndEnsureVisible(str(string).strip())
				self.logfile.write("%s\n"%(str(string).strip()))
			if self.ctrl.GetCount()>self.maxLines:
				for i in range(self.reduceCount):
					self.ctrl.Delete(0)
class stdoutControl(logControl):
	_name="STDOUT"
class stderrControl(logControl):
	_name="STDERR"

# V49_SELECTION_DICT = {}
# V49_SELECTION_DICT["ndr470"] = ("0: Vita 49 Off","2: Vita 49 On")
# V49_SELECTION_DICT["ndr472"] = V49_SELECTION_DICT["ndr470"]
# V49_SELECTION_DICT["ndr308"] = ("0: Vita 49 Off","1: Vita 49 On w/ Picosecond Timestamp","3: Vita 49 On w/ Sample Count Timestamp")
# V49_SELECTION_DICT["ndr308-ts"] = V49_SELECTION_DICT["ndr304"] = V49_SELECTION_DICT["ndr472a"] = V49_SELECTION_DICT["ndr308"]

RADIO_INFO_DICT = {} 
for radioName in CyberRadioDriver.getSupportedRadios():
	RADIO_INFO_DICT[radioName] = {}
	radioClass = CyberRadioDriver.getRadioClass(radioName)
	RADIO_INFO_DICT[radioName]["name"] = radioClass.getName()
	RADIO_INFO_DICT[radioName]["vita"] = radioClass.getVitaEnableOptionSet()
	RADIO_INFO_DICT[radioName]["usesTcp"] = radioClass.isConnectionModeSupported("tcp")
	RADIO_INFO_DICT[radioName]["isTx"] = (radioClass.getNumTransmitters() > 0)
	RADIO_INFO_DICT[radioName]["demoGuiScript"] = "ndr_qt_demo_gui.py"
	RADIO_INFO_DICT[radioName]["hasPortOption"] = True
# OVERRIDE the demo GUI script in the radio info dictionary for specific radio types
for radioName in ["ndr328", "ndr804"]:
	if radioName in RADIO_INFO_DICT:
		RADIO_INFO_DICT[radioName]["demoGuiScript"] = "ndr804_display.py"
		RADIO_INFO_DICT[radioName]["hasPortOption"] = False


class mainFrame(wx.Frame):
	cfgPath = os.path.expanduser("~/.guiLaunch.cfg")
	jsonCfgPath = os.path.expanduser("~/.guiLaunch.json")
	def __init__(self, *args, **kwds):
		# begin wxGlade: mainFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.statusbar = self.CreateStatusBar(4, 0)
		self.splitter = wx.SplitterWindow(self, -1, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.window_1_pane_1 = wx.Panel(self.splitter, -1)
		self.label_radioType = wx.StaticText(self.window_1_pane_1, -1, "Radio Type")
# 		self.radioSelectionBox = wx.ComboBox(self.window_1_pane_1, -1, choices=["NDR308", "NDR308-TS", "NDR470", "NDR472", "NDR304"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		radioChoices = sorted([RADIO_INFO_DICT[q]["name"] for q in RADIO_INFO_DICT])
		self.radioSelectionBox = wx.ComboBox(self.window_1_pane_1, -1, choices=radioChoices, style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.label_hostDevice = wx.StaticText(self.window_1_pane_1, -1, "Hostname")
		self.hostname = wx.TextCtrl(self.window_1_pane_1, -1, "ndr308-sn1006")
		self.devicename = wx.TextCtrl(self.window_1_pane_1, -1, "/dev/ndr47x")
		self.label_portBaud = wx.StaticText(self.window_1_pane_1, -1, "TCP Port")
		self.tcpport = wx.SpinCtrl(self.window_1_pane_1, -1, "8617", min=0, max=65535)
		self.baudrate = wx.ComboBox(self.window_1_pane_1, -1, choices=["115200", "921600"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.label_v49 = wx.StaticText(self.window_1_pane_1, -1, "Vita 49")
		self.radioButton_v49Off = wx.RadioButton(self.window_1_pane_1, -1, "OFF", style=wx.RB_GROUP)
		self.radioButton_v49On = wx.RadioButton(self.window_1_pane_1, -1, "ON")
		self.interfaceChoices = netifaces.interfaces()
		self.interfaceChoices.sort()
		self.label_interfaces = wx.StaticText(self.window_1_pane_1, -1, "IF Interfaces")
		self.gigabitIfBox = wx.ComboBox(self.window_1_pane_1, -1, choices=self.interfaceChoices, style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.tenGigIf1Box = wx.ComboBox(self.window_1_pane_1, -1, choices=self.interfaceChoices, style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.tenGigIf2Box = wx.ComboBox(self.window_1_pane_1, -1, choices=self.interfaceChoices, style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.label_v49Level = wx.StaticText(self.window_1_pane_1, -1, "Vita49 Level")
		self.vita49LevelSelectionBox = wx.ComboBox(self.window_1_pane_1, -1, choices=["0: Vita 49 Off", "1: Vita 49 On w/ Picosecond Timestamp", "3: Vita 49 On w/ Sample Count Timestamp"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
		self.testConnectionButton = wx.Button(self.window_1_pane_1, -1, "Test Connection")
		self.blankPanelBetweenButtons = wx.Panel(self.window_1_pane_1, -1)
		self.launchGuiButton = wx.Button(self.window_1_pane_1, -1, "Rx Demo")
# 		self.launchTxGuiButton = wx.Button(self.window_1_pane_1, -1, "NDR651 TX Control")
# 		self.launchRecordAndPlaybackGuiButton = wx.Button(self.window_1_pane_1, -1, "Record and Playback")
		self.bigBlankPanel = wx.Panel(self.window_1_pane_1, -1)
		self.controlSizer_staticbox = wx.StaticBox(self.window_1_pane_1, -1, "GUI Configuration")
		self.window_1_pane_2 = wx.Panel(self.splitter, -1)
		self.logControl = wx.ListBox(self.window_1_pane_2, -1, choices=[])
		self.logSizer_staticbox = wx.StaticBox(self.window_1_pane_2, -1, "Log")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_COMBOBOX, self.RadioTypeSelected, self.radioSelectionBox)
		self.Bind(wx.EVT_RADIOBUTTON, self.v49_selected, self.radioButton_v49Off)
		self.Bind(wx.EVT_RADIOBUTTON, self.v49_selected, self.radioButton_v49On)
		self.Bind(wx.EVT_BUTTON, self.testRadioConnect, self.testConnectionButton)
		self.Bind(wx.EVT_BUTTON, self.launchNdrGui, self.launchGuiButton)
# 		self.Bind(wx.EVT_BUTTON, self.launchNdrTxGui, self.launchTxGuiButton)
# 		self.Bind(wx.EVT_BUTTON, self.launchRecordAndPlayback, self.launchRecordAndPlaybackGuiButton)
		
		# end wxGlade
		#  Custom events and logging
		self.Bind(wx.EVT_CLOSE, self.OnClose)
		sys.stdout = stdoutControl(self.logControl,) # replace this with a Twisted logging emit() thingamajig
		sys.stderr = stderrControl(self.logControl,prefix=True,)
		#  variables used for running subprocesses
		self.guiProc = None
		self.txGuiProc = None
		self.testProc = None
		self.recPlayProc = None
		self.procStats = None
		#  Looping task to update statusbar content every second
		self.periodicTask = task.LoopingCall(self.updateStatusbar)
#		now = time.time()
#		time.sleep(ceil(now)-now)
		self.periodicTask.start(1,False)
		#  Disable settings that are currently unused
		self.tcpport.Disable()
		self.devicename.Disable()
		#  Read saved settings
		reactor.callLater(0,self.readSettings)

	def OnClose(self,event):
		if self.testProc is not None or self.guiProc is not None:
			dlg = wx.MessageDialog(self,
								"Do you really want to close this application?",
								"Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
			result = dlg.ShowModal()
			if result == wx.ID_OK:
				if self.testProc is not None:
					self.testProc.stop(True)
				elif self.guiProc is not None:
					self.guiProc.stop(True)
				self.Destroy()
		else:
			self.Destroy()
	
	def readSettings(self):
		print "readSettings"
		try:
			ret = False
			if os.path.exists(self.jsonCfgPath):
				print "Loading last configuration."
				
				cfg = open(self.jsonCfgPath,'r')
				settings = json.load(cfg)
				cfg.close()
				
				#self.radioSelectionBox.SetSelection( settings.get("radioSelectionIndex",0) )
				firstRadio = self.radioSelectionBox.GetString(0)
				self.radioSelectionBox.SetValue(settings.get("radioSelection", firstRadio))
				
				for val,widget in ((settings.get("gigabit_interface","eth0"),self.gigabitIfBox), \
									(settings.get("ten_gigabit_interface",["eth10","eth11"])[0],self.tenGigIf1Box), \
									(settings.get("ten_gigabit_interface",["eth10","eth11"])[1],self.tenGigIf2Box), \
									):
					if val is None or len(val)==0 or val not in self.interfaceChoices:
						widget.SetSelection(0)
					else:
						widget.SetValue(val)
				
				for key,object in (("hostname",self.hostname), \
									("devicename",self.devicename), \
									("tcpport",self.tcpport), \
									("baudrate",self.baudrate), \
# 									("v49",self.vita49LevelSelectionBox)
									):
					if settings.has_key(key):
						object.SetValue(settings[key])
				self.RadioTypeSelected(None)
				self.vita49LevelSelectionBox.SetSelection(settings.get("v49_selection",0))
				ret = True
			else:
				print "Not loading configuration."
				self.RadioTypeSelected(None)
			return ret
		except:
			traceback.print_exc()
			print "Error loading configuration."
			return False
	
	def saveSettings(self):
		settings = {}
		for key,object in (("hostname",self.hostname), \
							("devicename",self.devicename), \
							("tcpport",self.tcpport), \
							("baudrate",self.baudrate), \
							("radioSelection",self.radioSelectionBox), \
							("gigabit_interface",self.gigabitIfBox), \
# 							("v49",self.vita49LevelSelectionBox), \
							 ):
			settings[key] = object.GetValue()
		#settings["radioSelectionIndex"] = self.radioSelectionBox.GetSelection()
# 		settings["radioSelection"] = self.radioSelectionBox.GetValue()
# 		settings["gigabit_interface"] = self.gigabitIfBox.GetValue()
		settings["ten_gigabit_interface"] = [self.tenGigIf1Box.GetValue(), self.tenGigIf2Box.GetValue()]
		settings["v49_selection"] = self.vita49LevelSelectionBox.GetSelection()
		
		cfg = open(self.jsonCfgPath,'w')
		json.dump(settings, cfg, indent=4, sort_keys=True)
		cfg.close()
		
		print "Saved settings"
#		for k,v in settings.items():
#			print "%s = %s"%(k,v)
		return True
	
	def updateStatusbar(self):
		self.statusbar.SetStatusText( "Current Time: %s"%(time.strftime("%X"),),3 )
		try:
			if self.procStats is not None:
				self.statusbar.SetStatusText( "Process PID: %d"%(self.procStats.pid),0 )
				try:
					self.statusbar.SetStatusText( "CPU Utilization: %0.1f%%"%(self.procStats.get_cpu_percent(1.0)),1 )
				except:
					self.statusbar.SetStatusText( "CPU Utilization: %0.1f%%"%(self.procStats.cpu_percent(1.0)),1 )
				uptime = int(time.time() - self.procStats.create_time())
				self.statusbar.SetStatusText( "Uptime: %s"%(str(datetime.timedelta(seconds=uptime))),2 )
			else:
				self.statusbar.SetStatusText( "",0 )
				self.statusbar.SetStatusText( "",1 )
				self.statusbar.SetStatusText( "",2 )
		except:
			traceback.print_exc()
		
	
	def __set_properties(self):
		print "__set_properties"
		# begin wxGlade: mainFrame.__set_properties
		self.SetTitle("NDR Demo GUI Launcher")
		self.SetSize((800, 300))
		self.statusbar.SetStatusWidths([-1, -1, -1, -1])
		# statusbar fields
		statusbar_fields = ["", "", "", ""]
		for i in range(len(statusbar_fields)):
		    self.statusbar.SetStatusText(statusbar_fields[i], i)
		self.radioSelectionBox.SetSelection(0)
		self.devicename.Hide()
		self.baudrate.Hide()
		self.baudrate.SetSelection(0)
		self.label_v49.Hide()
		self.radioButton_v49Off.Hide()
		self.radioButton_v49On.Hide()
		self.vita49LevelSelectionBox.SetSelection(0)
		# end wxGlade
		x = _DATE
		x = x[x.find(":")+1:x.find("(")].strip()
		self.SetTitle("%s  (%s)"%(self.GetTitle(),x))

	def __do_layout(self):
		# begin wxGlade: mainFrame.__do_layout
		topSizer = wx.BoxSizer(wx.HORIZONTAL)
		self.logSizer_staticbox.Lower()
		logSizer = wx.StaticBoxSizer(self.logSizer_staticbox, wx.HORIZONTAL)
		self.controlSizer_staticbox.Lower()
		controlSizer = wx.StaticBoxSizer(self.controlSizer_staticbox, wx.VERTICAL)
		self.controlSizer = controlSizer
		buttonSizer = wx.BoxSizer(wx.HORIZONTAL)
		sizer_vita49Level = wx.BoxSizer(wx.HORIZONTAL)
		sizer_portBaud_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_portBaud = wx.BoxSizer(wx.HORIZONTAL)
		sizer_hostDevice = wx.BoxSizer(wx.HORIZONTAL)
		sizer_interfaces = wx.BoxSizer(wx.HORIZONTAL)
		sizer_radioSelection = wx.BoxSizer(wx.HORIZONTAL)
		sizer_radioSelection.Add(self.label_radioType, 2, wx.EXPAND, 0)
		sizer_radioSelection.Add(self.radioSelectionBox, 3, 0, 0)
		controlSizer.Add(sizer_radioSelection, 0, wx.EXPAND, 0)
		sizer_hostDevice.Add(self.label_hostDevice, 2, wx.EXPAND, 0)
		sizer_hostDevice.Add(self.hostname, 3, wx.EXPAND, 0)
		sizer_hostDevice.Add(self.devicename, 3, wx.EXPAND, 0)
		controlSizer.Add(sizer_hostDevice, 0, wx.EXPAND, 0)
		sizer_portBaud.Add(self.label_portBaud, 2, wx.EXPAND, 0)
		sizer_portBaud.Add(self.tcpport, 3, wx.EXPAND, 0)
		sizer_portBaud.Add(self.baudrate, 3, wx.EXPAND, 0)
		controlSizer.Add(sizer_portBaud, 0, wx.EXPAND, 0)
		sizer_portBaud_copy.Add(self.label_v49, 4, wx.EXPAND, 0)
		sizer_portBaud_copy.Add(self.radioButton_v49Off, 3, 0, 0)
		sizer_portBaud_copy.Add(self.radioButton_v49On, 3, 0, 0)
		controlSizer.Add(sizer_portBaud_copy, 0, wx.EXPAND, 0)
		sizer_vita49Level.Add(self.label_v49Level, 2, wx.EXPAND, 0)
		sizer_vita49Level.Add(self.vita49LevelSelectionBox, 3, 0, 0)
		controlSizer.Add(sizer_vita49Level, 0, wx.EXPAND, 0)
		sizer_interfaces.Add(self.label_interfaces, 4, wx.EXPAND, 0)
		sizer_interfaces.Add(self.gigabitIfBox, 6, wx.EXPAND, 0)
		sizer_interfaces.Add(self.tenGigIf1Box, 3, wx.EXPAND, 0)
		sizer_interfaces.Add(self.tenGigIf2Box, 3, wx.EXPAND, 0)
		controlSizer.Add(sizer_interfaces, 0, wx.EXPAND, 0)
# 		buttonSizer.Add(self.testConnectionButton, 3, wx.EXPAND, 0)
# 		buttonSizer.Add(self.blankPanelBetweenButtons, 2, wx.EXPAND, 0)
# 		buttonSizer.Add(self.launchGuiButton, 3, wx.EXPAND, 0)
# 		controlSizer.Add(buttonSizer, 0, wx.EXPAND, 0)
		controlSizer.Add(self.testConnectionButton, 0, 
						 wx.LEFT | wx.RIGHT | wx.EXPAND, 0)
		controlSizer.Add(self.launchGuiButton, 0, 
						 wx.LEFT | wx.RIGHT | wx.EXPAND, 0)
# 		controlSizer.Add(self.launchTxGuiButton, 0, 
# 						 wx.LEFT | wx.RIGHT | wx.EXPAND, 0)
# 		controlSizer.Add(self.launchRecordAndPlaybackGuiButton, 0, 
# 						 wx.LEFT | wx.RIGHT | wx.EXPAND, 0)
		controlSizer.Add(self.bigBlankPanel, 1, wx.EXPAND, 0)
		self.window_1_pane_1.SetSizer(controlSizer)
		logSizer.Add(self.logControl, 1, wx.EXPAND, 0)
		self.window_1_pane_2.SetSizer(logSizer)
		self.splitter.SplitVertically(self.window_1_pane_1, self.window_1_pane_2, 300)
		topSizer.Add(self.splitter, 1, wx.EXPAND, 0)
		self.SetSizer(topSizer)
		self.Layout()
		# end wxGlade
		self.sizer_hostDevice = sizer_hostDevice
		self.sizer_portBaud = sizer_portBaud
		self.sizer_interfaces = sizer_interfaces

	def onClose(self):
		dlg = wx.MessageDialog(self,"Do you really want to close this application?",
							"Confirm Exit", wx.OK|wx.CANCEL|wx.ICON_QUESTION)
		result = dlg.ShowModal()
		dlg.Destroy()
		if result == wx.ID_OK:
			self.Destroy()
	
	def enableAllButtons(self,enable=True):
		for i in (self.testConnectionButton, \
					self.launchGuiButton, \
					 ):
			i.Enable(enable)
# 		self.launchTxGuiButton.Enable(enable and RADIO_INFO_DICT[self.getRadioType()]["isTx"])
# 		self.launchRecordAndPlaybackGuiButton.Enable( enable and any( i in self.getRadioType() for i in ("308","651",) ) )
	
	def testStarted(self,pid):
		self.testConnectionButton.SetLabel("Stop Test")
		self.testConnectionButton.Enable()
		self.procStats = psutil.Process(pid)
		print "Radio connection test in progress."
	
	def testEnded(self,exitCode=None):
		self.testConnectionButton.SetLabel("Test Connection")
		self.enableAllButtons()
		self.testProc = None
		self.procStats = None
		print "!!  Radio connection test finished %s.  !!"%("successfully" if exitCode in (None,0) else "with errors")
	
	def guiStarted(self,pid):
		self.launchGuiButton.SetLabel("Kill GUI")
		self.launchGuiButton.Enable()
		self.procStats = psutil.Process(pid)
		print "<GUI started>"
	
	def guiEnded(self,exitCode=None):
		self.launchGuiButton.SetLabel("Rx Demo")
		self.enableAllButtons()
		self.guiProc = None
		self.procStats = None
		print "<GUI ended(%s)>"%exitCode
	
	def txGuiStarted(self, pid):
		self.launchTxGuiButton.SetLabel("Kill NDR651 TX Control")
		self.launchTxGuiButton.Enable()
		print "<TX GUI started>"
	
	def txGuiEnded(self, exitCode=None):
		self.launchTxGuiButton.SetLabel("NDR651 TX Control")
		self.enableAllButtons()
		self.txGuiProc = None
		print "<TX GUI ended (%s)>" % exitCode
	
	def recPlayGuiStarted(self, pid):
		self.launchRecordAndPlaybackGuiButton.SetLabel("Kill Record and Playback")
		self.launchRecordAndPlaybackGuiButton.Enable()
		print "<Rec&Play GUI started>"
	
	def recPlayGuiEnded(self, exitCode=None):
		self.launchRecordAndPlaybackGuiButton.SetLabel("Record and Playback")
		self.enableAllButtons()
		self.recPlayProc = None
		print "<Rec&Play GUI ended (%s)>" % exitCode
	
	def testRadioConnect(self, event):  # wxGlade: mainFrame.<event_handler>
		self.enableAllButtons(False)
		try:
			if self.guiProc is None and self.testProc is None:
# 				args = ["/usr/local/bin/testRadioConnection",]
				args = [os.path.join(self.getScriptDirectory(), "testRadioConnection"),]
				radioType = self.getRadioType()
				args += ["-r",radioType]
				if self.useTcp():
					args += ["-c","tcp"]
					args += ["-n",str(self.hostname.GetValue()).lower()]
					args += ["-p","%d"%int(self.tcpport.GetValue())]
				else:
					args += ["-c","tty"]
					args += ["-d",str(self.devicename.GetValue())]
					args += ["-b","%d"%int(self.baudrate.GetValue())]
				
				tenGigRadio = any( str(i) in radioType for i in (308,651) )
				if tenGigRadio:
					for i in (self.tenGigIf1Box.GetValue(),self.tenGigIf2Box.GetValue()):
						args.append(i)
				else:
					args.append(self.gigabitIfBox.GetValue())
				
				print "Testing Radio Connection...",repr(" ".join(args))
				self.testProc = twistedSubprocess(self.testStarted,self.testEnded)
				self.testProc.start(args)
				self.saveSettings()
			elif self.testProc is not None:
				self.testProc.stop()
		except:
			self.testEnded(54321)
			traceback.print_exc()

	def useTcp(self):
		#return self.getRadioType() in ("ndr308",)
		#return "ndr308" in self.getRadioType()
		if self.getRadioType() == "":
			return False
		else:
			return RADIO_INFO_DICT[self.getRadioType()]["usesTcp"]
	
	def launchNdrGui(self, event):  # wxGlade: mainFrame.<event_handler>
		self.enableAllButtons(False)
		try:
			if self.guiProc is None and self.testProc is None:
				self.guiProc = twistedSubprocess(self.guiStarted,self.guiEnded)
				radioType = self.getRadioType("launchNdrGui")
				print "radioType",radioType
				args = [os.path.join(self.getScriptDirectory(), 
									RADIO_INFO_DICT[radioType]["demoGuiScript"]),]
				args += ["-r", radioType]
				print RADIO_INFO_DICT[radioType]
				if self.useTcp():
					args += ["-n", str(self.hostname.GetValue()).lower()]
					if RADIO_INFO_DICT[radioType]["hasPortOption"]:
						args += ["-p", "%d" % int(self.tcpport.GetValue())]
				else:
					args += ["-n", str(self.devicename.GetValue()).lower()]
					args += ["-p", "%d" % int(self.baudrate.GetValue())]
				v49sel,v49lev = self.getVitaLevel()
				args += ["-v", str(v49lev)]
				tenGigRadio = any( str(i) in radioType for i in (308,651,328,804) )
				if tenGigRadio:
					args += ["--ifname", self.tenGigIf1Box.GetValue()]
					args += ["--dataPort", str(1)]
					#args += ["--if_10gbe2",self.tenGigIf2Box.GetValue()]
				else:
					args += ["--ifname", self.gigabitIfBox.GetValue()]
				print "Launching GUI...", repr(" ".join(args))
				self.guiProc.start(args)
				self.saveSettings()
			elif self.guiProc is not None:
				self.guiProc.stop()
		except:
			self.guiEnded(12345)
			traceback.print_exc()

	def launchNdrTxGui(self, event):
		self.enableAllButtons(False)
		try:
			if self.txGuiProc is None:
				self.txGuiProc = twistedSubprocess(self.txGuiStarted, self.txGuiEnded)
				args = [os.path.join(self.getScriptDirectory(), "ndr_tx_gui"),]
				args += ["-t", self.getRadioType()]
				if self.useTcp():
					args += ["-d", str(self.hostname.GetValue()).lower()]
				else:
					args += ["-d", "%s,%d" % (self.hostname.GetValue(), 
											  int(self.baudrate.GetValue()))]
				# args += ["--debug"]
				print "Launching TX GUI...",repr(" ".join(args))
				self.txGuiProc.start(args)
				self.saveSettings()
			elif self.txGuiProc is not None:
				self.txGuiProc.stop()
		except:
			self.txGuiEnded(12345)
			traceback.print_exc()

# 	def setRadioType(self,radioTypeString):
# 		buttonDict = {"ndr308":self.radioButton_ndr308,"ndr470":self.radioButton_ndr470,"ndr472":self.radioButton_ndr472}
# 		radioType = str(radioTypeString.strip().lower())
# 		for k,v in buttonDict.items():
# 			v.SetValue(k == radioType)
	
	def getVitaLevel(self):
		sel = self.vita49LevelSelectionBox.GetSelection()
		lev = self.vita49LevelSelectionBox.GetClientData( sel )
# 		return self,lev
		return sel,lev
	
	def getRadioType(self,caller=None):
#		for i in (self.radioButton_ndr308,self.radioButton_ndr470,self.radioButton_ndr472):
#			if i.GetValue():
#				return str(i.GetLabelText()).lower()
# 		return str(self.radioSelectionBox.GetValue()).strip().lower()
		ret = ""
		tmp = self.radioSelectionBox.GetValue()
		print(("getRadioType(%s)"%(caller)).center(40,"v"))
		for radioType in RADIO_INFO_DICT.iterkeys():
			print radioType
			if RADIO_INFO_DICT[radioType]["name"] == tmp:
				ret = radioType
				print "MATCH!"
				break
		print ret
		print(("getRadioType(%s)"%(caller)).center(40,"^"))
		return ret
	
	def getScriptDirectory(self):
		return os.path.split(os.path.realpath(__file__))[0]
	
	def RadioTypeSelected(self, event):  # wxGlade: mainFrame.<event_handler>
		if self.useTcp():
			self.hostname.Show()
			self.tcpport.Show()
			self.devicename.Hide()
			self.baudrate.Hide()
			self.label_hostDevice.SetLabel("Hostname/IP")
			self.label_portBaud.SetLabel("TCP Port")
		else:
			self.hostname.Hide()
			self.tcpport.Hide()
			self.devicename.Show()
			self.baudrate.Show()
			self.label_hostDevice.SetLabel("Device Path")
			self.label_portBaud.SetLabel("Baudrate")
		
		lastSelection = self.vita49LevelSelectionBox.GetSelection()
		self.vita49LevelSelectionBox.Clear()
# 		for i in V49_SELECTION_DICT[self.getRadioType()]:
# 			j = int( i.split(":")[0].strip() )
# 			self.vita49LevelSelectionBox.Append(i,j)
# 			if lastSelection>0:
# 				self.vita49LevelSelectionBox.SetSelection(self.vita49LevelSelectionBox.GetCount()-1)
# 			else:
# 				self.vita49LevelSelectionBox.SetSelection(0)
		for vitaCode, vitaDesc in sorted(RADIO_INFO_DICT[self.getRadioType()]["vita"].items()):
			self.vita49LevelSelectionBox.Append("%d: %s" % (vitaCode, vitaDesc), \
											    vitaCode)
		if lastSelection != wx.NOT_FOUND:
			self.vita49LevelSelectionBox.SetSelection(min(lastSelection, self.vita49LevelSelectionBox.GetCount()-1))
		else:
			self.vita49LevelSelectionBox.SetSelection(0)
		
# 		isTx = RADIO_INFO_DICT[self.getRadioType()]["isTx"]
# 		self.launchTxGuiButton.Enable(isTx)
# 		if not isTx:
# 			self.launchTxGuiButton.Hide()
# 		else:
# 			self.launchTxGuiButton.Show()
		allowPlayback = any( i in self.getRadioType() for i in ("308","651",
															    "328","804",) )
# 		self.launchRecordAndPlaybackGuiButton.Enable( allowPlayback )
		if not allowPlayback:
# 			self.launchRecordAndPlaybackGuiButton.Hide()
			self.gigabitIfBox.Show()
			self.tenGigIf1Box.Hide()
			self.tenGigIf2Box.Hide()
		else:
# 			self.launchRecordAndPlaybackGuiButton.Show()
			self.gigabitIfBox.Hide()
			self.tenGigIf1Box.Show()
			self.tenGigIf2Box.Show()
		
		self.sizer_hostDevice.Layout()
		self.sizer_portBaud.Layout()
		self.sizer_interfaces.Layout()
		self.controlSizer.Layout()
		
	def launchRecordAndPlayback(self, event):
		self.enableAllButtons(False)
		try:
			if self.recPlayProc is None:
				self.recPlayProc = twistedSubprocess(self.recPlayGuiStarted, self.recPlayGuiEnded)
				args = [os.path.join(self.getScriptDirectory(), "recordAndPlaybackGui.py"),]
				args += ["-R", self.getRadioType()]
				args += ["-H", str(self.hostname.GetValue()).lower()]
				args += ["-i", ",".join((self.tenGigIf1Box.GetValue(),self.tenGigIf2Box.GetValue()))]
				print "Launching Rec&Play GUI...",repr(" ".join(args))
				self.saveSettings()
				self.recPlayProc.start(args) 
			else:
				self.recPlayProc.stop()
		except:
			traceback.print_exc()
			self.recPlayGuiEnded(12345)


	def v49_selected(self, event):  # wxGlade: mainFrame.<event_handler>
		event.Skip()

# end of class mainFrame
class guiLauncher(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()
		frame_1 = mainFrame(None, -1, "")
		self.SetTopWindow(frame_1)
		frame_1.Show()
		return 1

# end of class guiLauncher

if __name__ == "__main__":
	ndrGuiLauncher = guiLauncher(0)
	reactor.registerWxApp(ndrGuiLauncher)
	reactor.run()
#	ndrGuiLauncher.MainLoop()
