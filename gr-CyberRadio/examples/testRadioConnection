#!/usr/bin/env python
# encoding: utf-8
'''
newTestConn -- shortdesc

newTestConn is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2015 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import traceback 

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

import CyberRadioDriver
import copy, socket, select, random, json
import netifaces

__all__ = []
__version__ = 0.1
__date__ = '2015-11-03'
__updated__ = '2015-11-03'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def getInterfaceAddresses(ifname):
	mac = ip = None
	ifList = netifaces.interfaces()
	if ifname in ifList:
		addrDict = netifaces.ifaddresses(ifname)
		ip = addrDict.get(netifaces.AF_INET,[{},])[0].get("addr",None)
		mac = addrDict.get(netifaces.AF_LINK,[{},])[0].get("addr",None)
	return mac,ip

def grabData(udpPort, numFrames=10, interface=None):
	passed = True
	reason = None
	if interface is None:
		ip = "0.0.0.0"
	else:
		mac,ip = getInterfaceAddresses(interface)
	frameList = []
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	sock.bind((str(ip),int(udpPort)),)
	for i in range(numFrames):
		ins,outs,excepts = select.select([sock],[],[],0.1)
		if len(ins)==0:
			passed = False
			reason = "Rx timeout."
			break
		else:
			frameList.append(sock.recvfrom(9000))
	print "\n%s\n"%( (' Rx %d frames on %s(%s):%d ' % (len(frameList), ip, interface, udpPort)).center(60,"*").center(80," ") )
	return passed, reason

def testRadioConnection(radioType, connType, hostnameOrSerialPort, tcpPortOrBaudrate, interfaceList, verbose=False):
	testPassed = True
	reason = None
	
	radioClass = CyberRadioDriver.getRadioClass(radioType)
	radio = radioClass(verbose=verbose)
	radio.connect(connType, hostnameOrSerialPort, tcpPortOrBaudrate)
	
	if radio.isConnected():
		cfgKeys = CyberRadioDriver.configKeys
		frqRange = radioClass.getTunerFrequencyRange()
		baseConfig = {cfgKeys.CONFIG_TUNER: {cfgKeys.ALL: {cfgKeys.ENABLE:True, \
															cfgKeys.TUNER_FREQUENCY: random.randint(frqRange[0],frqRange[1]), \
															cfgKeys.TUNER_ATTENUATION: 0, \
															 }, \
											 }, \
						cfgKeys.CONFIG_DDC: { cfgKeys.CONFIG_WBDDC: {cfgKeys.ALL:{cfgKeys.ENABLE: False, \
# 																					cfgKeys.DDC_UDP_DESTINATION: 0, \
# 																					cfgKeys.DDC_RATE_INDEX: 0, \
# 																					cfgKeys.DDC_VITA_ENABLE: 0, \
# 																					cfgKeys.DDC_FREQUENCY_OFFSET: 0, \
																					}, \
																		 }, \
												cfgKeys.CONFIG_NBDDC: {cfgKeys.ALL:{cfgKeys.ENABLE: False, \
# 																					cfgKeys.DDC_UDP_DESTINATION: 0, \
# 																					cfgKeys.DDC_RATE_INDEX: 0, \
# 																					cfgKeys.DDC_VITA_ENABLE: 0, \
# 																					cfgKeys.DDC_FREQUENCY_OFFSET: 0, \
																					}, \
																		 }, \
											 }, \
						 }
		
		
		initialConfig = copy.deepcopy(baseConfig)
		tenGigRadio = radio.getNumGigE() > 0
		basePort = random.randint(10000,60000)
		ipList = []
		if tenGigRadio:
			initialConfig[ cfgKeys.CONFIG_IP ] = {}
			udpPortList = []
			for ind,iface in enumerate(interfaceList):
				ifaceInd = radio.getGigEIndexRange()[ind]
				initialConfig[cfgKeys.CONFIG_IP][ifaceInd] = {}
				dmac,dip = getInterfaceAddresses(str(iface))
				ipList.append(dip)
				if dip is None:
					return False, "No IP address for local interface %s; is the interface connected?"%iface
				temp = [int(i) for i in dip.split(".")]
				temp[-1] = (temp[-1]+100)%255+1
				sip = ".".join(str(i) for i in temp)
				randport = random.randint(basePort,65535)
				if radio.json:
					initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_SOURCE] = {
							cfgKeys.GIGE_IP_ADDR: sip,
							cfgKeys.GIGE_NETMASK: "255.255.255.0",
							cfgKeys.GIGE_SOURCE_PORT: randport^0xffff,
						}
					initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_DEST] = {}
					tempPortList = []
					for i in range(32):
						temp = { cfgKeys.GIGE_IP_ADDR: dip, \
									cfgKeys.GIGE_MAC_ADDR: dmac, \
									cfgKeys.GIGE_DEST_PORT: randport,#basePort, \
								}
						initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_DEST][i] = temp
						tempPortList.append(randport)
	# 					tempPortList.append(basePort)
	# 					basePort += 1
				else:
					initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_SOURCE] = sip
					initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_DEST] = {}
					tempPortList = []
					for i in range(32):
						randport = random.randint(basePort,65535)
						temp = { cfgKeys.GIGE_IP_ADDR: dip, \
									cfgKeys.GIGE_MAC_ADDR: dmac, \
									cfgKeys.GIGE_DEST_PORT: randport,#basePort, \
									cfgKeys.GIGE_SOURCE_PORT: randport^0xffff, \
									 }
						initialConfig[cfgKeys.CONFIG_IP][ifaceInd][cfgKeys.IP_DEST][i] = temp
						tempPortList.append(randport)
	# 					tempPortList.append(basePort)
	# 					basePort += 1
				udpPortList.append(tempPortList)
		else:
			dmac,dip = getInterfaceAddresses(str(interfaceList[0]))
			temp = [int(i) for i in dip.split(".")]
			temp[-1] = (temp[-1]+100)%255+1
			sip = ".".join(str(i) for i in temp)
			initialConfig["ipConfiguration"] = {cfgKeys.IP_DEST: dip, \
												cfgKeys.MAC_DEST: dmac, \
												cfgKeys.IP_SOURCE: sip, \
												}
		radio.setConfiguration(copy.deepcopy(initialConfig))
		
		ddcTestIndex = 0
		for wideband in (True,False):
			if wideband and radio.getNumWbddc() == 0:
				continue
			elif not wideband and radio.getNumNbddc() == 0:
				continue
			tag = "WB" if wideband else "NB"
			ddcCfgKey = cfgKeys.CONFIG_WBDDC if wideband else cfgKeys.CONFIG_NBDDC
			ddcIndexList = radio.getWbddcIndexRange() if wideband else radio.getNbddcIndexRange()
			for ddcNum,ddcIndex in enumerate(ddcIndexList):
				ddcTestIndex += 1
				print ("Test #%d: %sDDC #%d"%(ddcTestIndex, tag, ddcIndex,)).center(100,".")
				config = {cfgKeys.CONFIG_TUNER: {
# 												cfgKeys.ALL: {cfgKeys.ENABLE:True, \
# 															cfgKeys.TUNER_FREQUENCY: random.randint(frqRange[0],frqRange[1]), \
# 															cfgKeys.TUNER_ATTENUATION: 0, \
# 															 }, \
											 }, \
							cfgKeys.CONFIG_DDC: { ddcCfgKey:{} }, \
# 												cfgKeys.CONFIG_WBDDC: {cfgKeys.ALL:{cfgKeys.ENABLE: False, \
# 																					cfgKeys.DDC_UDP_DESTINATION: 0, \
# 																					cfgKeys.DDC_RATE_INDEX: 0, \
# 																					cfgKeys.DDC_VITA_ENABLE: 0, \
# 																					}, \
# 																		 }, \
# 												cfgKeys.CONFIG_NBDDC: {cfgKeys.ALL:{cfgKeys.ENABLE: False, \
# 																					cfgKeys.DDC_UDP_DESTINATION: 0, \
# 																					cfgKeys.DDC_RATE_INDEX: 0, \
# 																					cfgKeys.DDC_VITA_ENABLE: 0, \
# 																					}, \
# 																		 }, \
# 											 }, \
							 }
				if tenGigRadio:
					# NDR354/364 don't have settable data ports.  Which data port
					# each DDC is linked to is found in the configuration.
					if radioType in ["ndr354", "ndr364"]:
						ifIndex = radio.getConfigurationByKeys(
								cfgKeys.CONFIG_DDC, ddcCfgKey, ddcIndex, cfgKeys.DDC_DATA_PORT
							)
					else:
						ifIndex = random.randint(0, len(interfaceList)-1)
					udpDest = random.randint(0,len(udpPortList[ifIndex])-1)
					udpPort = udpPortList[ifIndex][udpDest]
				else:
					ifIndex = 0
					udpDest = udpPort = random.randint(basePort,65535)
				interface = interfaceList[ifIndex]
				dport = radio.getGigEIndexRange()[ifIndex]
				config[cfgKeys.CONFIG_DDC][ddcCfgKey][ddcIndex] = { cfgKeys.ENABLE: True, \
																	cfgKeys.DDC_RATE_INDEX: random.choice(radio.getDdcRateSet(wideband).keys()), \
																	cfgKeys.DDC_VITA_ENABLE: 1, \
																	cfgKeys.DDC_UDP_DESTINATION: udpDest, \
																	cfgKeys.DDC_DATA_PORT: dport, \
																	cfgKeys.DDC_STREAM_ID: random.randint(0x000f,0xfff0), \
																	 }
				if radio.isDdcTunable(wideband):
					config[cfgKeys.CONFIG_DDC][ddcCfgKey][ddcIndex][cfgKeys.DDC_FREQUENCY_OFFSET] = random.randint(*[int(i) for i in radio.getDdcFrequencyRange(wideband)])
				if radio.isDdcSelectableSource(wideband):
					rfKey = random.randint(1,radio.getNumTuner())
					config[cfgKeys.CONFIG_DDC][ddcCfgKey][ddcIndex][cfgKeys.DDC_RF_INDEX] = rfKey
				else:
					rfKey = cfgKeys.ALL
				config[cfgKeys.CONFIG_TUNER][rfKey] = {cfgKeys.ENABLE:True, \
														cfgKeys.TUNER_FREQUENCY: random.randint(frqRange[0],frqRange[1]), \
														cfgKeys.TUNER_ATTENUATION: 0, \
														 }, \
				radio.setConfiguration(copy.deepcopy(config))
				success,failReason = grabData(udpPort, 128 if wideband else 8, interfaceList[ifIndex])
				if not success:
					return False, "Did not capture data from %s%02d; is radio port %d connected to local port %s?"%(tag,ddcNum,dport,interface)
				else:
					config.pop(cfgKeys.CONFIG_TUNER)
					config[cfgKeys.CONFIG_DDC][ddcCfgKey][ddcIndex][cfgKeys.ENABLE] = False
# 					config[cfgKeys.CONFIG_DDC].pop( cfgKeys.ALL )
					radio.setConfiguration(config)
		radio.setConfiguration(baseConfig)
	else:
		return False, "Cannot connect to radio"
	
	return testPassed, reason

class CLIError(Exception):
	'''Generic exception to raise and log different fatal errors.'''
	def __init__(self, msg):
		super(CLIError).__init__(type(self))
		self.msg = "E: %s" % msg
	def __str__(self):
		return self.msg
	def __unicode__(self):
		return self.msg

def main(argv=None): # IGNORE:C0111
	'''Command line options.'''

	if argv is None:
		argv = sys.argv
	else:
		sys.argv.extend(argv)

	program_name = os.path.basename(sys.argv[0])
	program_version = "v%s" % __version__
	program_build_date = str(__updated__)
	program_version_message = '%%(prog)s %s (%s)' % (program_version, program_build_date)
	program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
	program_license = '''%s

	Created by user_name on %s.
	Copyright 2015 organization_name. All rights reserved.

	Licensed under the Apache License 2.0
	http://www.apache.org/licenses/LICENSE-2.0

	Distributed on an "AS IS" basis without warranties
	or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

	try:
		# Setup argument parser
		parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
		parser.add_argument("-r", "--radioType", dest="radioType", default="ndr308", help="Radio type [default: %(default)s]")
		parser.add_argument("-c", "--connection_type", dest="connType", default="tcp", help="Connection type (tcp, tty) [default: %(default)s]")
		parser.add_argument("-n", "--hostname", dest="hostname", default="ndr308", help="Radio hostname [default: %(default)s]")
		parser.add_argument("-p", "--tcp_port", dest="tcpPort", default=8617, type=int, help="Radio TCP port. [default: %(default)s]")
		parser.add_argument("-d", "--serial_port", dest="serialPort", default="/dev/ndr47x", help="Serial port name. [default: %(default)s]")
		parser.add_argument("-b", "--baudrate", dest="baudrate", default=921600, type=int, help="Baud rate. [default: %(default)s]")
		parser.add_argument("-v", "--verbose", dest="verbose", default=False, action="store_true", help="Verbose driver mode. [default: %(default)s]")
		parser.add_argument(dest="ifList", default=["eth2","eth3"], help="Ethernet interfaces [default: %(default)s]", metavar="interface", nargs='*')

		# Process arguments
		args = parser.parse_args()
		
		radioType = args.radioType.lower()
		useSerial = args.connType.lower() in ("tty","serial")
		connType = args.connType.lower()
		if useSerial:
			connType = "tty"
		name = args.serialPort if useSerial else args.hostname
		port = args.baudrate if useSerial else args.tcpPort
		rcls = CyberRadioDriver.getRadioClass(radioType)
		ifList = args.ifList if rcls.getNumGigE() > 0 else ["eth0"]
		success,failReason = testRadioConnection(args.radioType.lower(), connType, name, port, args.ifList, args.verbose)

		if not success:
			print "Test failed due to %r"%(failReason)
		else:
			print "Test passed!"
		return 0 if success else 1
	except KeyboardInterrupt:
		### handle keyboard interrupt ###
		return 0
	except Exception, e:
		traceback.print_exc()
		if DEBUG or TESTRUN:
			raise(e)
		indent = len(program_name) * " "
		sys.stderr.write(program_name + ": " + repr(e) + "\n")
		sys.stderr.write(indent + "  for help use --help\n\n")
		return 2

if __name__ == "__main__":
	if DEBUG:
		sys.argv.append("-h")
		sys.argv.append("-v")
		sys.argv.append("-r")
	if TESTRUN:
		import doctest
		doctest.testmod()
	if PROFILE:
		import cProfile
		import pstats
		profile_filename = 'newTestConn_profile.txt'
		cProfile.run('main()', profile_filename)
		statsfile = open("profile_stats.txt", "wb")
		p = pstats.Stats(profile_filename, stream=statsfile)
		stats = p.strip_dirs().sort_stats('cumulative')
		stats.print_stats()
		statsfile.close()
		sys.exit(0)
	sys.exit(main())