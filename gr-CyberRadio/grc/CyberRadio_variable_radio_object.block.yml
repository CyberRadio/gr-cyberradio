# auto-generated by grc.converter

id: variable_radio_object
label: '[CyberRadio] Radio Object'
category: '[CyberRadio]/Radio Element Control'
flags:
- show_id

parameters:
-   id: radioType
    label: Radio Type
    dtype: string
    default: ndr308
    options: [ndr308, ndr651, ndr301, ndr501, NDR601]
    option_labels: [NDR308, NDR651, NDR301, NDR501, NDR601]
-   id: radioHostname
    label: Radio Hostname/IP
    dtype: string
    default: ndr308
-   id: connect
    label: Connect?
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: verbose
    label: Verbose?
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
value: ${ crd.getRadioObject(radioType, verbose=False) }

templates:
    imports: |-
        import CyberRadioDriver as crd
        import CyberRadioDriver
    var_make: "self.${id} = ${id} = crd.getRadioObject(\n        ${radioType}, \n\
        \        verbose=${verbose}, \n        host=${radioHostname} if ${connect}\
        \ else None, \n         )\nif ${connect} and ${verbose}:\n    if ${id}.isConnected():\n\
        \        print(\"{0} is {1}connected to {2} as {3}. Using CyberRadioDriver\
        \ version {4}.\".format(\"$(id)\", \"\" if ${id}.isConnected() else \"not\
        \ \", ${id}.host_or_dev, ${id}, crd.version))\n    else:\n        print(\"\
        Radio is NOT connected!\")\n  "

documentation: |-
    This block sets up the radio object used by radio control blocks.This variable block has no graphical representation.

file_format: 1
