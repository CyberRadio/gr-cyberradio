<?xml version="1.0"?>
<!-- 
################################################### 
# [CyberRadio] VITA Multi-File I/Q Source 
# 
# Author: DA 
# 
# Copyright: (c) 2015 CyberRadio Solutions, Inc. 
# All rights reserved. 
################################################### 
-->
<block>
  <name>[CyberRadio] VITA Multi-File I/Q Source</name>
  <key>CyberRadio_vita_multifile_iq_source</key>
  <category>[CyberRadio]/Vita and UDP Sources</category>
  <import>import CyberRadio</import>
  <make>CyberRadio.vita_multifile_iq_source(
  filespecs=$filespecs,
  alphabetical=$alphabetical,
  vita_type=$vita_type,
  payload_size=$payload_size,
  vita_header_size=$vita_header_size,
  vita_tail_size=$vita_tail_size,
  byte_swapped=$byte_swapped,
  iq_swapped=$iq_swapped,
  iq_scale_factor=$iq_scale_factor,
  repeat=$repeat,
  terminate_at_end=$terminate_at_end,
  tagged=$tagged,
  debug=$debug,
)</make>
  <callback>open($filespecs, $alphabetical, $repeat)</callback>
  <callback>set_iq_scale_factor($iq_scale_factor)</callback>
  <param>
    <name>File Name/Specification List</name>
    <key>filespecs</key>
    <value>[]</value>
    <type>raw</type>
  </param>
  <param>
    <name>Process Files Alphabetically</name>
    <key>alphabetical</key>
    <value>True</value>
    <type>bool</type>
  </param>
  <param>
    <name>VITA Type</name>
    <key>vita_type</key>
    <value>0</value>
    <type>int</type>
    <hide>part</hide>
  </param>
  <param>
    <name>VITA Payload Size</name>
    <key>payload_size</key>
    <value>8192</value>
    <type>int</type>
    <hide>part</hide>
  </param>
  <param>
    <name>VITA Header Size</name>
    <key>vita_header_size</key>
    <value>0</value>
    <type>int</type>
    <hide>part</hide>
  </param>
  <param>
    <name>VITA Tail Size</name>
    <key>vita_tail_size</key>
    <value>0</value>
    <type>int</type>
    <hide>part</hide>
  </param>
  <param>
    <name>Byte-Swapped</name>
    <key>byte_swapped</key>
    <value>False</value>
    <type>bool</type>
    <hide>part</hide>
  </param>
  <param>
    <name>I/Q Swapped</name>
    <key>iq_swapped</key>
    <value>False</value>
    <type>bool</type>
    <hide>part</hide>
  </param>
  <param>
    <name>I/Q Scale Factor</name>
    <key>iq_scale_factor</key>
    <value>1.0</value>
    <type>float</type>
    <hide>part</hide>
  </param>
  <param>
    <name>Repeat</name>
    <key>repeat</key>
    <value>False</value>
    <type>bool</type>
  </param>
  <param>
    <name>Terminate When Data Ends</name>
    <key>terminate_at_end</key>
    <value>False</value>
    <type>bool</type>
  </param>
  <param>
    <name>Tagged Output Streams</name>
    <key>tagged</key>
    <value>False</value>
    <type>bool</type>
  </param>
  <param>
    <name>Debug Mode</name>
    <key>debug</key>
    <value>False</value>
    <type>bool</type>
  </param>
  <source>
    <name>out</name>
    <type>complex</type>
    <vlen>1</vlen>
      <optional>1</optional>
  </source>
  <doc>
Generic VITA 49-compatible I/Q data source block that \
pulls its source data from a sequence of files.

The vita_multifile_iq_source block provides I/Q data from a \
sequence of files on disk.  The sequence of files can be \
explicitly provided by the user, determined by evaluating a \
wildcard file specification, or some combination of these.

The behavior of this block when it has no active files to read \
data from depends on the Terminate When Data Ends option.  If \
this option is True, then the flowgraph will terminate.  If it \
is not set, then it will output (complex) zeros until it does \
have valid data files.

This block assumes that the data being read from disk is in \
a format returned by an NDR-class radio.  This will be either \
raw I/Q data (16-bit interleaved I and Q) or VITA 49 frame \
format.  The output from this block is native (32-bit) complex.

The vita_multifile_iq_source block can also produce stream tags at \
the beginning of each received VITA 49 frame.  The block generates \
the following stream tags, as appropriate for the radio:
* absolute_sample_num -- The absolute sample number
* absolute_packet_num -- The absolute packet number
* filename -- The file name that the data comes from.  If the \
packet spans files, the file name will be the file that the \
beginning of the packet data came from.
* frame_counter -- The VITA frame counter
* frame_size -- The VITA frame size
* packet_type -- The VITA packet type
* packet_counter -- The VITA packet counter
* packet_size -- The VITA packet size
* stream_id -- The VITA stream ID
* timestamp_int_type -- The VITA timestamp integer (TSI) field type
* timestamp_int -- The VITA timestamp integer (TSI) field
* timestamp_frac_type -- The VITA timestamp fractional (TSF) field type
* timestamp_frac -- The VITA timestamp fractional (TSF) field
* organizationally_unique_id -- The organizationally unique ID (OUI)
* information_class_code -- The information class code (ICC)
* packet_class_code -- The packet class code (PCC)

In addition, this block provides some features that are useful \
in a GUI environment, where the file(s) that the user wants to \
use is (are) not necessarily known when the flowgraph starts. \
(This is a drawback of the stock file_source object in GNU Radio.)
  </doc>
</block>
