# auto-generated by grc.converter

id: CyberRadio_vita_iq_source
label: '[CyberRadio] VITA I/Q Source (Deprecated)'
category: '[CyberRadio]/Vita and UDP Sources'

parameters:
-   id: vita_type
    label: VITA Type
    dtype: int
    default: '0'
-   id: payload_size
    label: Payload Size
    dtype: int
    default: '8192'
-   id: vita_header_size
    label: VITA Header Size
    dtype: int
    default: '0'
-   id: vita_tail_size
    label: VITA Tail Size
    dtype: int
    default: '0'
-   id: byte_swapped
    label: Byte-Swapped
    dtype: bool
    default: 'False'
-   id: iq_swapped
    label: I/Q Swapped
    dtype: bool
    default: 'False'
-   id: iq_scale_factor
    label: I/Q Scale Factor
    dtype: float
    default: '1.0'
-   id: host
    label: Host Name
    dtype: string
    default: 0.0.0.0
-   id: port_list
    label: Port List
    dtype: int_vector
    default: '[41000]'
    hide: part
-   id: tagged
    label: Tagged Output Streams
    dtype: bool
    default: 'False'
-   id: debug
    label: Debug Mode
    dtype: bool
    default: 'False'

outputs:
-   domain: stream
    dtype: complex
    vlen: 1
    multiplicity: ${ len(port_list) }
    optional: true

templates:
    imports: import CyberRadio
    make: |-
        CyberRadio.vita_iq_source(
            vita_type=${vita_type},
            payload_size=${payload_size},
            vita_header_size=${vita_header_size},
            vita_tail_size=${vita_tail_size},
            byte_swapped=${byte_swapped},
            iq_swapped=${iq_swapped},
            iq_scale_factor=${iq_scale_factor},
            host=${host},
            port_list=${port_list},
            tagged=${tagged},
            debug=${debug},
        )

documentation: |-
    A generic VITA 49-compatible I/Q data source block.

    The vita_iq_source block outputs VITA 49 or raw I/Q data coming from an NDR-class radio.  The source block listens for incoming I/Q data using UDP and dispatches it to its output port(s) as needed.  Dispatching is governed by which UDP port the data comes in on, so each data stream needs to be assigned its own UDP port on the radio side.

    This class is designed to be as flexible as possible in dealing with data streams, since each NDR-class radio varies in how it packages data streams.

    The vita_iq_source block can also produce stream tags at the beginning of each received VITA 49 frame.  The block generates the following stream tags, as appropriate for the radio:
    * absolute_sample_num -- The absolute sample number
    * frame_counter -- The VITA frame counter
    * frame_size -- The VITA frame size
    * packet_type -- The VITA packet type
    * packet_counter -- The VITA packet counter
    * packet_size -- The VITA packet size
    * stream_id -- The VITA stream ID
    * timestamp_int_type -- The VITA timestamp integer (TSI) field type
    * timestamp_int -- The VITA timestamp integer (TSI) field
    * timestamp_frac_type -- The VITA timestamp fractional (TSF) field type
    * timestamp_frac -- The VITA timestamp fractional (TSF) field
    * organizationally_unique_id -- The organizationally unique ID (OUI)
    * information_class_code -- The information class code (ICC)
    * packet_class_code -- The packet class code (PCC)
    If the radio is sending raw I/Q data instead of VITA 49 frames, this block will not produce stream tags regardless of the tagged setting.

file_format: 1
