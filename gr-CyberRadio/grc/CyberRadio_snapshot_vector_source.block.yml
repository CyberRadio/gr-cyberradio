id: CyberRadio_snapshot_vector_source
label: '[CyberRadio] Snapshot Vector Source'
category: '[CyberRadio]/Vita Sources'
flags: [ python, cpp ]

templates:
  imports: import CyberRadio
  make: |-
      CyberRadio.snapshot_vector_source(
          ${radioObj}.name.lower(), 
          ${ip}, 
          ${port}, 
          ${block_size}, 
          ${block_rate}
      )
      print("%s = CyberRadio.snapshot_vector_source(%r, %r, %r, %r, %r)"%("$(id)", ${ip}, ${port}, ${block_size}, ${block_rate}, ${radioObj}.name.lower()))

cpp_templates:
  includes: ['#include <CyberRadio/snapshot_vector_source.h>']
  declarations: 'CyberRadio::snapshot_vector_source::sptr ${id};'
  make: 'this->${id} = CyberRadio::snapshot_vector_source::make(static_cast<const char *>(${radioObj}),${ip},${port},${block_size},${block_rate});'
  link: ['gnuradio-CyberRadio']
  translations:
    'True' : 'true'
    'False' : 'false'

parameters:
-   id: radioObj
    label: Radio Object
    dtype: raw
-   id: ip
    label: IP
    dtype: string
    default: '"0.0.0.0"'
    hide: part
-   id: port
    label: Port
    dtype: int
    default: '11000'
-   id: block_size
    label: Block Size
    dtype: int
    default: '131072'
    hide: ${ ('part' if block_size == 1 else 'none') }
-   id: block_rate
    label: Block Rate
    dtype: int
    default: '10'

inputs:
-   domain: message
    id: control
    optional: true

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ (block_size) }
-   domain: message
    id: status
    optional: true

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
