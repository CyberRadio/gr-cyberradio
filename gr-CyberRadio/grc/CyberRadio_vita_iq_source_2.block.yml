# auto-generated by grc.converter

id: CyberRadio_vita_iq_source_2
label: '[CyberRadio] VITA I/Q Source v2 (deprecated)'
category: '[CyberRadio]/Vita and UDP Sources'

parameters:
-   id: vitaType
    label: Vitatype
    dtype: int
    default: '3'
    hide: part
-   id: payloadSize
    label: Payload Size (Bytes)
    dtype: int
    default: 1024*4
    hide: part
-   id: vitaHeaderSize
    label: Vita Header Size (Bytes)
    dtype: int
    default: 10*4
    hide: part
-   id: vitaTailSize
    label: Vita Tail Size (Bytes)
    dtype: int
    default: 1*4
    hide: part
-   id: byteSwapped
    label: Byteswapped
    dtype: bool
    default: 'False'
    hide: part
-   id: iqSwapped
    label: Iqswapped
    dtype: bool
    default: 'False'
    hide: part
-   id: host
    label: Host
    dtype: string
    default: 0.0.0.0
-   id: port
    label: Port
    dtype: int
    default: '41000'
-   id: debug
    label: Debug?
    dtype: bool
    default: 'False'
    hide: part
-   id: tagOutput
    label: Tag Output Stream?
    dtype: bool
    default: 'False'
    hide: part
-   id: coherent
    label: NDR304 Coherent Mode?
    dtype: bool
    default: 'False'
    hide: part
-   id: type
    label: Output Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part

outputs:
-   label: Vita49
    domain: stream
    dtype: ${ type }
    vlen: ${ (payloadSize+vitaHeaderSize+vitaTailSize)/type.size }
-   label: IQ
    domain: stream
    dtype: complex
    vlen: ${ payloadSize/4 }

templates:
    imports: import CyberRadio
    make: "CyberRadio.vita_iq_source_2(\n    ${vitaType}, \n    ${payloadSize}, \n\
        \    ${vitaHeaderSize}, \n    ${vitaTailSize}, \n    ${byteSwapped}, \n  \
        \  ${iqSwapped}, \n    ${host}, \n    ${port}, \n    ${debug}, \n    ${tagOutput},\
        \ \n    ${coherent}, \n     )"

file_format: 1
