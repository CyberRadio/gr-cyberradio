# auto-generated by grc.converter

id: CyberRadio_NDR304_source
label: '[CyberRadio] NDR304 Source (Deprecated)'
category: '[CyberRadio]/Radio Sources'

parameters:
-   id: verbose_mode
    label: Verbose Mode
    dtype: bool
    default: 'True'
-   id: radio_device_name
    label: Radio Device Name
    dtype: string
    default: /dev/ndr47x
-   id: radio_baud_rate
    label: Radio Baud Rate
    dtype: int
    default: '921600'
-   id: gig_iface_to_use
    label: GigE Interface To Use
    dtype: string
    default: eth0
    hide: none
-   id: coherent_mode
    label: Coherent Mode
    dtype: int
    default: '0'
    options: ['0', '1', '2', '3']
    option_labels: [0 (None), 1 (Tuners only), 2 (DDCs only), 3 (Tuners & DDCs)]
    hide: none
-   id: num_tuners
    label: Number of Tuners
    dtype: int
    default: '1'
    options: ['1', '2', '3', '4', '5', '6']
-   id: tuner1_param_list
    label: Tuner 1 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if num_tuners >= 1 else 'all') }
-   id: tuner2_param_list
    label: Tuner 2 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if coherent_mode in [0,2] and num_tuners >= 2 else 'all') }
-   id: tuner3_param_list
    label: Tuner 3 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if coherent_mode in [0,2] and num_tuners >= 3 else 'all') }
-   id: tuner4_param_list
    label: Tuner 4 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if coherent_mode in [0,2] and num_tuners >= 4 else 'all') }
-   id: tuner5_param_list
    label: Tuner 5 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if coherent_mode in [0,2] and num_tuners >= 5 else 'all') }
-   id: tuner6_param_list
    label: Tuner 6 Parameter List
    dtype: raw
    default: '[True, 900e6, 0]'
    hide: ${ ('part' if coherent_mode in [0,2] and num_tuners >= 6 else 'all') }
-   id: num_wbddcs
    label: Number of WBDDCs
    dtype: int
    default: '1'
    options: ['1', '2', '3', '4', '5', '6']
    hide: part
-   id: wbddc1_param_list
    label: WBDDC 1 Parameter List
    dtype: raw
    default: '[40001, 0, 0, True, 0e6]'
    hide: ${ ('part' if num_wbddcs >= 1 else 'all') }
-   id: wbddc2_param_list
    label: WBDDC 2 Parameter List
    dtype: raw
    default: '[40002, 0, 0, True, 0e6]'
    hide: ${ ('part' if coherent_mode in [0,1] and num_wbddcs >= 2 else 'all') }
-   id: wbddc3_param_list
    label: WBDDC 3 Parameter List
    dtype: raw
    default: '[40003, 0, 0, True, 0e6]'
    hide: ${ ('part' if coherent_mode in [0,1] and num_wbddcs >= 3 else 'all') }
-   id: wbddc4_param_list
    label: WBDDC 4 Parameter List
    dtype: raw
    default: '[40004, 0, 0, True, 0e6]'
    hide: ${ ('part' if coherent_mode in [0,1] and num_wbddcs >= 4 else 'all') }
-   id: wbddc5_param_list
    label: WBDDC 5 Parameter List
    dtype: raw
    default: '[40005, 0, 0, True, 0e6]'
    hide: ${ ('part' if coherent_mode in [0,1] and num_wbddcs >= 5 else 'all') }
-   id: wbddc6_param_list
    label: WBDDC 6 Parameter List
    dtype: raw
    default: '[40006, 0, 0, True, 0e6]'
    hide: ${ ('part' if coherent_mode in [0,1] and num_wbddcs >= 6 else 'all') }
-   id: tagged
    label: Tagged Output Streams
    dtype: bool
    default: 'False'

outputs:
-   label: log
    domain: stream
    dtype: byte
    vlen: 1
    optional: true
-   label: wbddc
    domain: stream
    dtype: complex
    vlen: 1
    multiplicity: ${ (6 if coherent_mode in [2,3] else num_wbddcs) }
    optional: true

templates:
    imports: import CyberRadio
    make: |-
        CyberRadio.NDR304_source(
            verbose_mode=${verbose_mode},
            radio_device_name=${radio_device_name},
            radio_baud_rate=${radio_baud_rate},
            gig_iface_to_use=${gig_iface_to_use},
            coherent_mode=${coherent_mode},
            num_tuners=${num_tuners},
            tuner1_param_list=${tuner1_param_list},
        % if num_tuners >= 2:
            tuner2_param_list=${tuner2_param_list},
        % endif
        % if num_tuners >= 3:
            tuner3_param_list=${tuner3_param_list},
        % endif
        % if num_tuners >= 4:
            tuner4_param_list=${tuner4_param_list},
        % endif
        % if num_tuners >= 5:
            tuner5_param_list=${tuner5_param_list},
        % endif
        % if num_tuners >= 6:
            tuner6_param_list=${tuner6_param_list},
        % endif
            num_wbddcs=${num_wbddcs},
            wbddc1_param_list=${wbddc1_param_list},
        % if num_wbddcs >= 2:
            wbddc2_param_list=${wbddc2_param_list},
        % endif
        % if num_wbddcs >= 3:
            wbddc3_param_list=${wbddc3_param_list},
        % endif
        % if num_wbddcs >= 4:
            wbddc4_param_list=${wbddc4_param_list},
        % endif
        % if num_wbddcs >= 5:
            wbddc5_param_list=${wbddc5_param_list},
        % endif
        % if num_wbddcs >= 6:
            wbddc6_param_list=${wbddc6_param_list},
        % endif
            tagged=${tagged},
        )
    callbacks:
    - set_tuner1_param_list(${tuner1_param_list})
    - set_tuner2_param_list(${tuner2_param_list})
    - set_tuner3_param_list(${tuner3_param_list})
    - set_tuner4_param_list(${tuner4_param_list})
    - set_tuner5_param_list(${tuner5_param_list})
    - set_tuner6_param_list(${tuner6_param_list})
    - set_wbddc1_param_list(${wbddc1_param_list})
    - set_wbddc2_param_list(${wbddc2_param_list})
    - set_wbddc3_param_list(${wbddc3_param_list})
    - set_wbddc4_param_list(${wbddc4_param_list})
    - set_wbddc5_param_list(${wbddc5_param_list})
    - set_wbddc6_param_list(${wbddc6_param_list})

documentation: "I/Q data source block using the NDR304 radio.\n\nThe NDR304_source\
    \ block supplies wideband DDC outputs, as indicated by the Number of WBDDCs setting.\
    \ Any outputs supplied by this block are optional, so the user does not need to\
    \ connect them if they are not being used.  The NDR304_source block also supplies\
    \ a character-stream output for collecting logging data from the underlying driver\
    \ interface.\n\nWBDDCs are configured via parameter lists.  Parameter lists are\
    \ standard Python lists, formatted as follows:\n* A tuner parameter list contains\
    \ the following elements: [tuner enabled flag, tuner frequency (Hz), tuner attenuation\
    \ (dB)].\n* A WBDDC parameter list contains the following elements: [UDP port\
    \ number, VITA type, sample rate index, enabled flag, DDC frequency offset (Hz)].\
    \ \n\nThe NDR304_source block can also produce stream tags for any WBDDCs configured\
    \ to use VITA 49 frames.  See the documentation for the base VITA I/Q Source block\
    \ for details on the stream tags produced.\n\nNOTE: GNU Radio Companion handles\
    \ WBDDC indexes differently than the block configuration parameters do.  If only\
    \ one WBDDC is used, the output port (\"wbddc\") is not indexed at all.  If more\
    \ than one WBDDC is used, then the WBDDC outputs have zero-based indexes (so WBDDC\
    \ 1 comes out on port \"wbddc0\", WBDDC 2 comes out on port \"wbddc1\", etc.).\n\
    \nNOTE: The parameter list scheme is a workaround to get around the (undocumented)\
    \ parameter limit that GNU Radio Companion silently imposes."

file_format: 1
