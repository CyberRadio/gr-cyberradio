# auto-generated by grc.converter

id: CyberRadio_log_mag_fft
label: '[CyberRadio] Log Mag FFT'
category: '[CyberRadio]/DSP Functions'

parameters:
-   id: numInputs
    label: '# Inputs'
    dtype: int
    default: '1'
    hide: part
-   id: fftSize
    label: FFT Size
    dtype: int
    default: '1024'
    hide: part
-   id: windowType
    label: Window Type
    dtype: raw
    default: '"blackmanharris"'
    options: ['"boxcar"', '"flattop"', '"hann"', '"blackmanharris"', '"hamming"']
    option_labels: [Rectangular, Flat Top, Hann, Blackman-Harris, Hamming]
-   id: iirAlpha
    label: Averaging Alpha
    dtype: float
    default: 2.0**-3
-   id: secondaryOutput
    label: Secondary Output
    dtype: enum
    options: [fft, mag, mag_unfiltered, log_mag_unfiltered]
    option_labels: [FFT, Mag^2 (filtered), Mag^2 (unfiltered), Log. Mag. (unfiltered)]
    option_attributes:
        num: ['1', '1', '1', '1']
        string: ['"fft"', '"mag_filtered"', '"mag_unfiltered"', '"log_mag_unfiltered"']
        type: [complex, float, float, float]
    hide: part
-   id: resetOnAlphaChange
    label: Reset Filter on Alpha Change?
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part

inputs:
-   label: IQ
    domain: stream
    dtype: complex
    vlen: ${ fftSize }
    multiplicity: ${ numInputs }
-   domain: message
    id: reset
    optional: true

outputs:
-   label: Log Mag
    domain: stream
    dtype: float
    vlen: ${ fftSize }
    multiplicity: ${ numInputs }
-   label: Secondary
    domain: stream
    dtype: ${ secondaryOutput.type }
    vlen: ${ fftSize }
    multiplicity: ${ numInputs }
    optional: true

templates:
    imports: import CyberRadio
    make: "CyberRadio.log_mag_fft( \n    numInputs=${numInputs}, \n    fftSize=${fftSize},\
        \ \n    windowType=${windowType}, \n    iirAlpha=${iirAlpha}, \n    secondaryOutput=${secondaryOutput.string},\
        \ \n    resetOnAlphaChange=${resetOnAlphaChange}, \n     )"
    callbacks:
    - set_iirAlpha(${iirAlpha})

file_format: 1
