# auto-generated by grc.converter

id: CyberRadio_generic_tuner_control_block
label: '[CyberRadio] NDR Tuner Control Block'
category: '[CyberRadio]/Radio Element Control'

parameters:
-   id: radioObj
    label: Radio Object
    dtype: raw
    hide: part
-   id: index
    label: Index
    dtype: int
    default: '1'
-   id: enable
    label: Enable
    dtype: bool
    default: 'True'
    hide: part
-   id: freq
    label: Frequency (MHz)
    dtype: int
    default: '0'
-   id: attenuation
    label: Attenuation
    dtype: int
    default: '0'
    hide: part
-   id: filter
    label: IF Filter
    dtype: int
    default: '1'
    hide: part
-   id: ifout
    label: IF Output
    dtype: bool
    default: 'False'
    hide: part
-   id: group
    label: Tuner Group
    dtype: raw
    default: None
    hide: part
-   id: otherArgs
    label: Other Args (dict)
    category: Misc.
    dtype: raw
    default: '{}'
    hide: part
-   id: debug
    label: Debug
    category: Misc.
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part

inputs:
-   domain: message
    id: control
    optional: true
-   domain: message
    id: freq
    optional: true

outputs:
-   domain: message
    id: status
    optional: true
-   domain: message
    id: freq
    optional: true

templates:
    imports: import CyberRadio
    make: "CyberRadio.generic_tuner_control_block(${radioObj},${index},${enable},${freq},${attenuation},${filter},${ifout},${group},${otherArgs},${debug})"
    callbacks:
    - set_index(${index})
    - set_enable(${enable})
    - set_freq(${freq})
    - set_attenuation(${attenuation})
    - set_filter(${filter})
    - set_otherArgs(${otherArgs})
    - set_ifout(${ifout})

file_format: 1
