# auto-generated by grc.converter

id: CyberRadio_NDR651_sync_sink
label: '[CyberRadio] NDR651 Synch. Sink'
category: '[CyberRadio]/Sinks'

parameters:
-   id: radioHostname
    label: Radio Hossstname
    category: General
    dtype: string
    default: ndr651
-   id: num_inputs
    label: Number Inputs
    category: General
    dtype: enum
    default: '2'
    options: ['1', '2']
    hide: all
-   id: debug
    label: Debug
    category: General
    dtype: enum
    default: '1'
    options: ['1', '0']
    option_labels: ['True', 'False']
-   id: groupIndex
    label: Group Index
    category: General
    dtype: enum
    options: ['1', '2']
-   id: channelRate
    label: Channel Rate
    category: General
    dtype: int
    default: '1'
-   id: tenGbeIndex
    label: 10 Gbe Index
    category: General
    dtype: int
    default: '1'
-   id: eth_index1
    label: eth_index1
    category: In1
    dtype: string
    default: eth2
-   id: centerFreqMHz1
    label: Center Frequency (MHz)
    category: In1
    dtype: float
    default: 1e3
-   id: txChannel1
    label: Transmit channel
    category: In1
    dtype: enum
    default: '1'
    options: ['1', '2', '3']
    option_labels: [Tx 1, Tx 2, Tx 3 (both)]
-   id: rf_attenuationDB1
    label: RF attentuation (dB)
    category: In1
    dtype: float
    default: '0'
-   id: udp_port1
    label: UDP Port
    category: In1
    dtype: int
    default: '34567'
-   id: frequencyOffsetMHz1
    label: Digital Frequency Offset (MHz)
    category: In1
    dtype: float
    default: '0'
-   id: digital_attenuationDB1
    label: Digital Attenuation (dB)
    category: In1
    dtype: float
    default: '0'
-   id: mult1
    label: Mult
    category: In1
    dtype: float
    default: '1'
-   id: ducChannel1
    label: DUC Channel
    category: In1
    dtype: int
    default: '1'
-   id: eth_index2
    label: eth_index1
    category: In2
    dtype: string
    default: eth3
-   id: centerFreqMHz2
    label: Center Frequency (MHz)
    category: In2
    dtype: float
    default: 1e3
-   id: txChannel2
    label: Transmit channel
    category: In2
    dtype: enum
    default: '2'
    options: ['1', '2', '3']
    option_labels: [Tx 1, Tx 2, Tx 3 (both)]
-   id: rf_attenuationDB2
    label: RF attentuation (dB)
    category: In2
    dtype: float
    default: '0'
-   id: udp_port2
    label: UDP Port
    category: In2
    dtype: int
    default: '34568'
-   id: frequencyOffsetMHz2
    label: Digital Frequency Offset (MHz)
    category: In2
    dtype: float
    default: '0'
-   id: digital_attenuationDB2
    label: Digital Attenuation (dB)
    category: In2
    dtype: float
    default: '0'
-   id: mult2
    label: Mult
    category: In2
    dtype: float
    default: '1'
-   id: ducChannel2
    label: DUC Channel
    category: In2
    dtype: int
    default: '2'

inputs:
-   domain: stream
    dtype: complex
    multiplicity: ${ num_inputs }

templates:
    imports: import CyberRadio
    make: "CyberRadio.NDR651_sync_sink(${radioHostname}, ${num_inputs}, ${debug},\
        \ ${groupIndex}, ${channelRate}, ${tenGbeIndex},\n\t\t${centerFreqMHz1}, ${txChannel1},\
        \ ${rf_attenuationDB1}, ${eth_index1}, ${udp_port1}, ${frequencyOffsetMHz1},\
        \ ${digital_attenuationDB1}, ${mult1}, ${ducChannel1},\n\t\t${centerFreqMHz2},\
        \ ${txChannel2}, ${rf_attenuationDB2}, ${eth_index2}, ${udp_port2}, ${frequencyOffsetMHz2},\
        \ ${digital_attenuationDB2}, ${mult2}, ${ducChannel2})"
    callbacks:
    - mult_callback(${mult1}, ${mult2})
    - setDUCFreq_callback(${frequencyOffsetMHz1}, ${frequencyOffsetMHz2})
    - setDUCAtten_callback(${digital_attenuationDB1}, ${digital_attenuationDB2})
    - setTxFreq_callback(${centerFreqMHz1}, ${centerFreqMHz2})
    - setTxAtten_callback(${rf_attenuationDB1}, ${rf_attenuationDB2})
    - setDUCParameters(${ducChannel1}, ${ducChannel2}, ${channelRate}, ${txChannel1},
        ${txChannel2})
    - setEthernetInterface(${tenGbeIndex}, ${eth_index1}, ${eth_index2}, ${upd_port1},
        ${upd_port2})

documentation: "* This grc block is used to transmit data synchrnously to the NDR651\n\
    * It takes in 2 complex IQ streams and sends data out via syncTXClient (some sort\
    \ of ethernet thing)\n* It sends data out in sizes of ETH_PACKET_SIZE (1024),\
    \ so this block was made to be decimating. By being decimating, GNU radio won't\
    \ call it untill it has multiples of ETH_PACKET_SIZE\n\n** Possible uses\n* This\
    \ would be usefull for createing a GSM test enviorment as forward and reverse\
    \ signals could be played at the same time\n\n** Likely Issues that may be encountered\n\
    * If you're getting text that looks like \"34568@620816.68225607:P(0)_e\" packets\
    \ are being droped. This could be due to either a slow disk, a slow CPU, or a\
    \ slow network\n* This block expects data between [-2**15 and 2**15-1]. Giving\
    \ it data between [-1,1) would result in a flat signal\n* If you get an error\
    \ along the lines of deque out of range, the firmware of the radio may be out\
    \ of data. Additionally, you may have forgotten to change the ethernet IPs. eth2\
    \ should be 172.16.2.1 and eth3 should be 172.16.3.1 (which you can check with\
    \ ifconfig). \n\tcat /etc/network/interfaces.d/internal.cfg \n\t\t\t#auto eth2\n\
    \t\tiface eth2 inet static\n\t\t\taddress 172.16.2.1\n\t\t\tnetmask 255.255.255.0\n\
    \t\t\tmtu 9000\n\t\t\tup ethtool -A eth2 tx off\n\t\t\tup ethtool -G eth2 rx 4096\
    \ tx 4096\n\n\t\t#auto eth3\n\t\tiface eth3 inet static\n\t\t\taddress 172.16.3.1\n\
    \t\t\tnetmask 255.255.255.0\n\t\t\tmtu 9000\n\t\t\tup ethtool -A eth3 tx off\n\
    \t\t\tup ethtool -G eth3 rx 4096 tx 4096"

file_format: 1
