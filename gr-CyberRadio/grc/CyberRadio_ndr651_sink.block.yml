# auto-generated by grc.converter

id: CyberRadio_ndr651_sink
label: '[CyberRadio] NDR651 TXClient'
category: '[CyberRadio]/Sinks'

parameters:
-   id: hostname
    label: Hostname
    dtype: string
    default: '"ndr651"'
-   id: dataPort
    label: Radio Data Port (1,2)
    category: 10GbE
    dtype: int
    default: '1'
    hide: part
-   id: udpPort
    label: UDP Port
    category: 10GbE
    dtype: int
    default: '65000'
    hide: part
-   id: interfaceName
    label: Local Interface Name (e.g. ethX)
    category: 10GbE
    dtype: string
    default: '"eth2"'
    hide: part
-   id: ducIndex
    label: DUC Index
    dtype: int
    default: '1'
-   id: ducRateIndex
    label: DUC Rate Index
    category: DUC
    dtype: int
    default: '1'
    hide: part
-   id: ducFrequency
    label: DUC Frequency Offset (Hz)
    category: DUC
    dtype: float
    default: '0.0'
    hide: part
-   id: ducAttenuation
    label: DUC Attenuation (dB)
    category: DUC
    dtype: float
    default: '0.0'
    hide: part
-   id: ducTxChannel
    label: DUC Tx Channel
    category: DUC
    dtype: int
    default: '1'
    hide: part
-   id: txInversion
    label: DUC Tx Inversion
    category: DUC
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: ducPaused
    label: DUC Paused
    category: DUC
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: configTx
    label: Configure Tx?
    category: RF
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: txFrequency
    label: RF Frequency (MHz)
    category: RF
    dtype: float
    default: '1000.0'
    hide: ${ ('part' if configTx else 'all') }
-   id: txAttenuation
    label: RF Attenuation (dB)
    category: RF
    dtype: float
    default: '0'
    hide: ${ ('part' if configTx else 'all') }
-   id: vlen
    label: Vector Length
    dtype: int
    default: '1024'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: debug
    label: Debug
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part

inputs:
-   domain: stream
    dtype: complex
    vlen: ${ vlen }
-   domain: message
    id: freq
    optional: true

templates:
    imports: import CyberRadio
    make: |
        CyberRadio.ndr651_sink(${hostname}, ${vlen}, ${debug})
        self.${id}.setDUCParameters(${ducIndex}, ${ducRateIndex}, ${ducTxChannel})
        self.${id}.setDUCFreq(${ducFrequency})
        self.${id}.setDUCAtten(${ducAttenuation})
        self.${id}.setEthernetInterface(${dataPort}, ${interfaceName}, ${ducIndex+65000})
        % if configTx:
        self.${id}.setTxFreq(${txFrequency})
        self.${id}.setTxAtten(${txAttenuation})
        % endif
    callbacks:
    - setDUCRateIndex(${ducRateIndex})
    - setDUCFreq(${ducFrequency})
    - setDUCAtten(${ducAttenuation})
    - '% if configTx:

        setTxFreq(${txFrequency})

        % endif'
    - '% if configTx:

        setTxAtten(${txAttenuation})

        % endif'
    - pauseDUC(${ducPaused})
    - setTxInversion(${txInversion})

file_format: 1
