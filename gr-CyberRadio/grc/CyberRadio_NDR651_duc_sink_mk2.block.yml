# auto-generated by grc.converter

id: CyberRadio_NDR651_duc_sink_mk2
label: '[CyberRadio] NDR651 DUC Sink (Mk2)'
category: '[CyberRadio]/Sinks'

parameters:
-   id: radio_host_name
    label: Radio Host Name
    dtype: string
    default: ndr651
-   id: radio_tcp_port
    label: Radio TCP Port
    dtype: int
    default: '8617'
-   id: tengig_iface_index
    label: Radio 10GigE Interface Index (1 or 2)
    dtype: int
    default: '1'
-   id: iq_scale_factor
    label: I/Q Scale Factor
    dtype: float
    default: (2.0**15)-1
    hide: part
-   id: duc_channel
    label: DUC Channel
    dtype: int
    default: '1'
-   id: duc_iface_string
    label: DUC Interface Name
    dtype: string
    default: eth10
-   id: duc_rate_index
    label: DUC Rate Index
    dtype: int
    default: '0'
-   id: duc_frequency
    label: DUC Frequency
    dtype: int
    default: '0'
-   id: duc_attenuation
    label: DUC Attenuation
    dtype: float
    default: '0'
-   id: duc_tx_channels
    label: DUC TX Channels
    dtype: int
    default: '1'
-   id: duc_tx_frequency
    label: DUC TX Frequency (MHz)
    dtype: real
    default: '900'
-   id: duc_tx_attenuation
    label: DUC TX Attenuation
    dtype: int
    default: '0'
-   id: duc_stream_id
    label: DUC Stream ID
    dtype: int
    default: '40001'
-   id: config_tx
    label: Configure Tx Channel
    dtype: bool
    default: 'False'
-   id: debug
    label: Debug Mode
    dtype: bool
    default: 'False'
-   id: duchsPfThresh
    label: DUCHS PF Threshold
    dtype: int
    default: '25'
-   id: duchsPeThresh
    label: DUCHS PE Threshold
    dtype: int
    default: '24'
-   id: duchsPeriod
    label: DUCHS Period
    dtype: int
    default: '10'
-   id: updatePE
    label: Update on PE?
    dtype: bool
    default: 'False'
-   id: txinvMode
    label: TX Inversion Mode (0/1)
    dtype: int
    default: '0'

inputs:
-   label: wbduc
    domain: stream
    dtype: complex
    vlen: 1

templates:
    imports: import CyberRadio
    make: "CyberRadio.NDR651_duc_sink_mk2(\n    radio_host_name = ${radio_host_name},\
        \ \n    radio_tcp_port = ${radio_tcp_port}, \n    tengig_iface_index = ${tengig_iface_index},\n\
        \    iq_scale_factor = ${iq_scale_factor},\n    duc_channel = ${duc_channel},\
        \ \n    duc_iface_string = ${duc_iface_string}, \n    duc_rate_index = ${duc_rate_index},\
        \ \n    duc_frequency = ${duc_frequency}, \n    duc_attenuation = ${duc_attenuation},\
        \ \n    duc_tx_channels = ${duc_tx_channels}, \n    duc_tx_frequency = ${duc_tx_frequency},\n\
        \    duc_tx_attenuation = ${duc_tx_attenuation},\n    duc_stream_id = ${duc_stream_id},\n\
        \    config_tx = ${config_tx},\n    debug = ${debug},\n    duchsPfThresh =\
        \ ${duchsPfThresh}, \n    duchsPeThresh = ${duchsPeThresh}, \n    duchsPeriod\
        \ = ${duchsPeriod}, \n    updatePE = ${updatePE}, \n    txinv_mode = ${txinvMode},\
        \ \n)"
    callbacks:
    - set_iq_scale_factor(${iq_scale_factor})
    - set_duc_channel(${duc_channel})
    - set_duc_iface_string(${duc_iface_string})
    - set_duc_rate_index(${duc_rate_index})
    - set_duc_frequency(${duc_frequency})
    - set_duc_attenuation(${duc_attenuation})
    - set_duc_tx_channels(${duc_tx_channels})
    - set_duc_tx_frequency(${duc_tx_frequency})
    - set_duc_tx_attenuation(${duc_tx_attenuation})
    - set_duc_stream_id(${duc_stream_id})
    - set_duchs_pf_threshold(${duchsPfThresh})
    - set_duchs_pe_threshold(${duchsPeThresh})
    - set_duchs_period(${duchsPeriod})
    - set_duchs_update_pe(${updatePE})
    - set_duc_txinv_mode(${txinvMode})

documentation: |-
    The NDR651_duc_sink_mk2 block represents a single digital upconverter (DUC) on an NDR651 radio, and transmits the signal sent to its input.

    To use more than one DUC on the NDR651, use multiple sinks, one for each DUC.

file_format: 1
