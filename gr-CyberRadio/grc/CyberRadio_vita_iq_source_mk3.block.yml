# auto-generated by grc.converter

id: CyberRadio_vita_iq_source_mk3
label: '[CyberRadio] VITA I/Q Source Mk3 (Deprecated)'
category: '[CyberRadio]/Vita and UDP Sources'

parameters:
-   id: vita_type
    label: VITA Type
    dtype: int
    default: '0'
-   id: payload_size
    label: Payload Size
    dtype: int
    default: '8192'
-   id: vita_header_size
    label: VITA Header Size
    dtype: int
    default: '0'
-   id: vita_tail_size
    label: VITA Tail Size
    dtype: int
    default: '0'
-   id: byte_swapped
    label: Byte-Swapped
    dtype: bool
    default: 'False'
-   id: iq_swapped
    label: I/Q Swapped
    dtype: bool
    default: 'False'
-   id: iq_scale_factor
    label: I/Q Scale Factor
    dtype: float
    default: '1.0'
-   id: host
    label: Host Name
    dtype: string
    default: 0.0.0.0
-   id: port
    label: Port
    dtype: int
    default: '41000'
-   id: ddc_coherent
    label: DDC-Coherent Mode
    dtype: bool
    default: 'False'
-   id: num_outputs
    label: Number of Outputs
    dtype: int
    default: '1'
    hide: part
-   id: tagged
    label: Tagged Output Streams
    dtype: bool
    default: 'False'
-   id: debug
    label: Debug Mode
    dtype: bool
    default: 'False'

outputs:
-   domain: stream
    dtype: complex
    vlen: 1
    multiplicity: ${ num_outputs }
    optional: true

templates:
    imports: import CyberRadio
    make: |-
        CyberRadio.vita_iq_source_mk3(
            vita_type=${vita_type},
            payload_size=${payload_size},
            vita_header_size=${vita_header_size},
            vita_tail_size=${vita_tail_size},
            byte_swapped=${byte_swapped},
            iq_swapped=${iq_swapped},
            iq_scale_factor=${iq_scale_factor},
            host=${host},
            port=${port},
            ddc_coherent=${ddc_coherent},
            num_outputs=${num_outputs},
            tagged=${tagged},
            debug=${debug},
        )

documentation: "A generic VITA 49-compatible I/Q data source block.\n\nThe vita_iq_source_mk3\
    \ block outputs VITA 49 or raw I/Q data coming from an NDR-class radio.  The source\
    \ block listens for incoming I/Q data using UDP and dispatches it to its output\
    \ port(s) as needed.  This block uses multiple output ports, one per tuner, if\
    \ the incoming data is in DDC-coherent mode.  \n\nNOTE: When using this block\
    \ in DDC-coherent mode, all output ports MUST be connected.\n\nThis class is designed\
    \ to be as flexible as possible in dealing with data streams, since each NDR-class\
    \ radio varies in how it packages data streams.\n\nThe vita_iq_source_mk3 block\
    \ can also produce stream tags at the beginning of each received VITA 49 frame.\
    \  The block generates the following stream tags, as appropriate for the radio:\n\
    * absolute_sample_num -- The absolute sample number\n* frame_counter -- The VITA\
    \ frame counter\n* frame_size -- The VITA frame size\n* packet_type -- The VITA\
    \ packet type\n* packet_counter -- The VITA packet counter\n* packet_size -- The\
    \ VITA packet size\n* stream_id -- The VITA stream ID\n* timestamp_int_type --\
    \ The VITA timestamp integer (TSI) field type\n* timestamp_int -- The VITA timestamp\
    \ integer (TSI) field\n* timestamp_frac_type -- The VITA timestamp fractional\
    \ (TSF) field type\n* timestamp_frac -- The VITA timestamp fractional (TSF) field\n\
    * organizationally_unique_id -- The organizationally unique ID (OUI)\n* information_class_code\
    \ -- The information class code (ICC)\n* packet_class_code -- The packet class\
    \ code (PCC)\nIf the radio is sending raw I/Q data instead of VITA 49 frames,\
    \ this block will not produce stream tags regardless of the tagged setting."

file_format: 1
