# auto-generated by grc.converter

id: CyberRadio_vita49_source
label: '[CyberRadio] VITA49 Source'
category: '[CyberRadio]/Vita and UDP Sources'
flags:
- throttle

parameters:
-   id: radioObj
    label: Radio Object
    dtype: raw
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: src_ip
    label: Src_ip
    dtype: string
    default: 0.0.0.0
-   id: port
    label: Port
    dtype: int
    default: '19091'
-   id: tag_packets
    label: Tag_packets
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    hide: part
-   id: vector_output
    label: Vector Output?
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    hide: full
-   id: narrowband
    label: Narrowband?
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    hide: part
-   id: debug
    label: Debug
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    hide: part

inputs:
-   domain: message
    id: control
    optional: true

outputs:
-   domain: stream
    dtype: complex
    vlen: ${ {False:1, True:radioObj.getVitaPayloadSize()//4}[vector_output] }
-   domain: message
    id: status
    optional: true

templates:
    imports: import CyberRadio
    make: "CyberRadio.vita_udp_rx(\n      ${src_ip}, \n      ${port}, \n      ${radioObj}.getVitaHeaderSize(),\
        \ \n      ${radioObj}.getVitaPayloadSize()//4, \n      ${radioObj}.getVitaHeaderSize()+${radioObj}.getVitaPayloadSize()+${radioObj}.getVitaTailSize(),\
        \ \n      ${radioObj}.isByteswapped(), \n      ${radioObj}.isIqSwapped(),\
        \ \n      ${tag_packets}, \n      ${vector_output}, \n      True, \n     \
        \ ${narrowband}, \n      ${debug}, \n       )"

file_format: 1
