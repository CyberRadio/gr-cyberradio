# auto-generated by grc.converter

id: CyberRadio_NDR472_source
label: '[CyberRadio] NDR472 Source (Deprecated)'
category: '[CyberRadio]/Radio Sources'

parameters:
-   id: verbose_mode
    label: Verbose Mode
    dtype: bool
    default: 'True'
-   id: radio_device_name
    label: Radio Device Name
    dtype: string
    default: /dev/ndr47x
-   id: radio_baud_rate
    label: Radio Baud Rate
    dtype: int
    default: '921600'
-   id: gig_iface_to_use
    label: GigE Interface To Use
    dtype: string
    default: eth0
    hide: none
-   id: num_tuners
    label: Number of Tuners
    dtype: int
    default: '1'
    options: ['1', '2']
-   id: tuner1_param_list
    label: Tuner 1 Parameter List
    dtype: raw
    default: '[False, 900e6, 0]'
    hide: ${ ('part' if num_tuners >= 1 else 'all') }
-   id: tuner2_param_list
    label: Tuner 2 Parameter List
    dtype: raw
    default: '[False, 900e6, 0]'
    hide: ${ ('part' if num_tuners >= 2 else 'all') }
-   id: num_wbddcs
    label: Number of WBDDCs
    dtype: int
    default: '1'
    options: ['1', '2']
    hide: part
-   id: wbddc1_param_list
    label: WBDDC 1 Parameter List
    dtype: raw
    default: '[40001, 0, 0, False, 0e6]'
    hide: ${ ('part' if num_wbddcs >= 1 else 'all') }
-   id: wbddc2_param_list
    label: WBDDC 2 Parameter List
    dtype: raw
    default: '[40002, 0, 0, False, 0e6]'
    hide: ${ ('part' if num_wbddcs >= 2 else 'all') }
-   id: tagged
    label: Tagged Output Streams
    dtype: bool
    default: 'False'

outputs:
-   label: log
    domain: stream
    dtype: byte
    vlen: 1
    optional: true
-   label: wbddc
    domain: stream
    dtype: complex
    vlen: 1
    multiplicity: ${ num_wbddcs }
    optional: true

templates:
    imports: import CyberRadio
    make: |-
        CyberRadio.NDR472_source(
            verbose_mode=${verbose_mode},
            radio_device_name=${radio_device_name},
            radio_baud_rate=${radio_baud_rate},
            gig_iface_to_use=${gig_iface_to_use},
            num_tuners=${num_tuners},
            tuner1_param_list=${tuner1_param_list},
        % if num_tuners >= 2:
            tuner2_param_list=${tuner2_param_list},
        % endif
            num_wbddcs=${num_wbddcs},
            wbddc1_param_list=${wbddc1_param_list},
        % if num_wbddcs >= 2:
            wbddc2_param_list=${wbddc2_param_list},
        % endif
            tagged=${tagged},
        )
    callbacks:
    - set_tuner1_param_list(${tuner1_param_list})
    - set_tuner2_param_list(${tuner2_param_list})
    - set_wbddc1_param_list(${wbddc1_param_list})
    - set_wbddc2_param_list(${wbddc2_param_list})

documentation: "I/Q data source block using the NDR472 radio.\n\nThe NDR472_source\
    \ block supplies wideband DDC outputs, as indicated by the Number of WBDDCs setting.\
    \ Any outputs supplied by this block are optional, so the user does not need to\
    \ connect them if they are not being used.  The NDR472_source block also supplies\
    \ a character-stream output for collecting logging data from the underlying driver\
    \ interface.\n\nTuners and WBDDCs are configured via parameter lists.  Parameter\
    \ lists are standard Python lists, formatted as follows:\n* A tuner parameter\
    \ list contains the following elements: [tuner enabled flag, tuner frequency (Hz),\
    \ tuner attenuation (dB)].\n* A WBDDC parameter list contains the following elements:\
    \ [UDP port number, VITA type, sample rate index, enabled flag, DDC frequency\
    \ offset (Hz)]. \n\nThe NDR472_source block can also produce stream tags for any\
    \ WBDDCs configured to use VITA 49 frames.  See the documentation for the base\
    \ VITA I/Q Source block for details on the stream tags produced.\n\nNOTE: GNU\
    \ Radio Companion handles WBDDC indexes differently than the block configuration\
    \ parameters do.  If only one WBDDC is used, the output port (\"wbddc\") is not\
    \ indexed at all.  If more than one WBDDC is used, then the WBDDC outputs have\
    \ zero-based indexes (so WBDDC 1 comes out on port \"wbddc0\", WBDDC 2 comes out\
    \ on port \"wbddc1\", etc.).  \n\nNOTE: The parameter list scheme is a workaround\
    \ to get around the (undocumented) parameter limit that GNU Radio Companion silently\
    \ imposes."

file_format: 1
