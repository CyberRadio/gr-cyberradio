# auto-generated by grc.converter

id: CyberRadio_freq_msg_converter
label: '[CyberRadio] Freq Msg Converter'
category: '[CyberRadio]/Misc'

parameters:
-   id: msgKey
    label: Message Key
    dtype: string
    default: freq
-   id: unitsIn
    label: Freq Units In
    dtype: real
    default: 1.0e6
    options: [1.0e9, 1.0e6, 1.0e3, '1.0']
    option_labels: [GHz, MHz, kHz, Hz]
-   id: unitsOut
    label: Freq Units Out
    dtype: real
    default: '1.0'
    options: [1.0e9, 1.0e6, 1.0e3, '1.0']
    option_labels: [GHz, MHz, kHz, Hz]
-   id: offset
    label: Offset (Input Units)
    dtype: float
    default: '0.0'
-   id: roundOutput
    label: Round Output?
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: triggerOnChange
    label: New message on change?
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part
-   id: debug
    label: Debug
    dtype: bool
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
    hide: part

inputs:
-   domain: message
    id: freq
    optional: true

outputs:
-   domain: message
    id: freq
    optional: true

templates:
    imports: import CyberRadio
    make: "CyberRadio.freq_msg_converter(\n      msgKey = ${msgKey}, \n      unitsIn\
        \ = ${unitsIn}, \n      unitsOut = ${unitsOut}, \n      offset = ${offset},\
        \ \n      roundOutput = ${roundOutput}, \n      triggerOnChange = ${triggerOnChange},\
        \ \n      debug = ${debug}, \n       )"
    callbacks:
    - set_unitsIn(${unitsIn})
    - set_unitsOut(${unitsOut})
    - set_offset(${offset})

file_format: 1
