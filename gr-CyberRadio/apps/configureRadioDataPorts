#!/usr/bin/env python
# encoding: utf-8
'''
configureRadioDataPorts -- shortdesc

configureRadioDataPorts is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2016 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

import netifaces
import CyberRadioDriver as crd

__all__ = []
__version__ = 0.1
__date__ = '2016-10-14'
__updated__ = '2016-10-14'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

################################################################################
def configRadio(radioType, hostname, port, ifList, udpBase):
	print "configRadio(%s, %s, %s, %s)"%(radioType, hostname, port, ifList)
	radio = crd.getRadioObject(radioType, verbose=False)
	radio.connect("tcp", hostname, port)
	print radio.sendCommand("CFG 1\n")
	print radio.getGigEIndexRange()
	for ifIndex in radio.getGigEIndexRange():
		if len(ifList)>0:
			interface = ifList.pop(0)
			ipInfo = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]
			macInfo = netifaces.ifaddresses(interface)[netifaces.AF_LINK][0]
			dip = ipInfo["addr"]
			dmac = macInfo["addr"]
			temp = [int(i) for i in dip.split(".")]
			temp[-1]+=1
			sip = ".".join(str(i) for i in temp)
			sipCmd = "#SIP %d, %s"%(ifIndex, sip)
			print repr(sipCmd),radio.sendCommand(sipCmd+"\n")
			for dipEntry in radio.getGigEDipEntryIndexRange():
				thisPort = udpBase+dipEntry
				dipCmd = "#DIP %d, %d, %s, %s, %d, %d"%(ifIndex, dipEntry, dip, dmac, thisPort, thisPort,)
				print repr(dipCmd),radio.sendCommand(dipCmd+"\n")
		else:
			print "No mo' interfaces?!?"
	print radio.sendCommand("CFG 0\n")
	
	return 0
################################################################################

class CLIError(Exception):
	'''Generic exception to raise and log different fatal errors.'''
	def __init__(self, msg):
		super(CLIError).__init__(type(self))
		self.msg = "E: %s" % msg
	def __str__(self):
		return self.msg
	def __unicode__(self):
		return self.msg

def main(argv=None): # IGNORE:C0111
	'''Command line options.'''

	if argv is None:
		argv = sys.argv
	else:
		sys.argv.extend(argv)

	program_name = os.path.basename(sys.argv[0])
	program_version = "v%s" % __version__
	program_build_date = str(__updated__)
	program_version_message = '%%(prog)s %s (%s)' % (program_version, program_build_date)
	program_shortdesc = __import__('__main__').__doc__.split("\n")[1]
	program_license = '''%s

	Created by user_name on %s.
	Copyright 2016 organization_name. All rights reserved.

	Licensed under the Apache License 2.0
	http://www.apache.org/licenses/LICENSE-2.0

	Distributed on an "AS IS" basis without warranties
	or conditions of any kind, either express or implied.

USAGE
''' % (program_shortdesc, str(__date__))

	try:
		# Setup argument parser
		parser = ArgumentParser(description=program_license, formatter_class=RawDescriptionHelpFormatter)
		parser.add_argument("-r", "--radio", dest="radioType", type=str, default="ndr308", help="Radio Type [default: %(default)s]")
		parser.add_argument("-n", "--hostname", dest="hostname", type=str, default="ndr308", help="Radio hostname or IP [default: %(default)s]")
		parser.add_argument("-p", "--port", dest="port", type=int, default=8617, help="Radio TCP Port [default: %(default)s]")
		parser.add_argument("-u", "--udpbase", dest="udpBase", type=int, default=11000, help="UDP Base Port [default: %(default)s]")
		parser.add_argument('-V', '--version', action='version', version=program_version_message)
		parser.add_argument(dest="ifList", default="eth6 eth7", help="Local interfaces (in order) [default: %(default)s]", metavar="ifList", nargs='+')

		# Process arguments
		args = parser.parse_args()

		print repr(args)
		return configRadio(args.radioType, args.hostname, args.port, args.ifList, args.udpBase)
	except KeyboardInterrupt:
		### handle keyboard interrupt ###
		return 0
	except Exception, e:
		if DEBUG or TESTRUN:
			raise(e)
		indent = len(program_name) * " "
		sys.stderr.write(program_name + ": " + repr(e) + "\n")
		sys.stderr.write(indent + "  for help use --help")
		return 2

if __name__ == "__main__":
	if DEBUG:
		sys.argv.append("-h")
		sys.argv.append("-v")
		sys.argv.append("-r")
	if TESTRUN:
		import doctest
		doctest.testmod()
	if PROFILE:
		import cProfile
		import pstats
		profile_filename = 'configureRadioDataPorts_profile.txt'
		cProfile.run('main()', profile_filename)
		statsfile = open("profile_stats.txt", "wb")
		p = pstats.Stats(profile_filename, stream=statsfile)
		stats = p.strip_dirs().sort_stats('cumulative')
		stats.print_stats()
		statsfile.close()
		sys.exit(0)
	sys.exit(main())