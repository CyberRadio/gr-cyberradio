######################################################################
# LibCyberRadioConfigVersion.cmake
#
# Configures the package version information for CMake.
#
# Author: DA
#
######################################################################

# [Debug] Echo input
#MESSAGE(STATUS "[LibCyberRadioConfigVersion] Input")
#MESSAGE(STATUS "* PACKAGE_FIND_VERSION=${PACKAGE_FIND_VERSION}")
#MESSAGE(STATUS "  * MAJOR=${PACKAGE_FIND_VERSION_MAJOR}")
#MESSAGE(STATUS "  * MINOR=${PACKAGE_FIND_VERSION_MINOR}")
#MESSAGE(STATUS "  * PATCH=${PACKAGE_FIND_VERSION_PATCH}")

# Set package versioning info
SET(PACKAGE_VERSION "@PACKAGE_VERSION@")
# Deconstruct PACKAGE_VERSION value into "major", "minor", and "patch"
# values.   
# -- NOTE: The MATH() commands below strip leading zeros from version
#    components. The "patch" version needs to strip anything non-numeric
#    prior to evaluation.
STRING(REPLACE "." ";" PACKAGE_VERSION_LIST ${PACKAGE_VERSION})
LIST(GET PACKAGE_VERSION_LIST 0 PACKAGE_VERSION_MAJOR_IN)
LIST(GET PACKAGE_VERSION_LIST 1 PACKAGE_VERSION_MINOR_IN)
LIST(GET PACKAGE_VERSION_LIST 2 PACKAGE_VERSION_PATCH_IN)
MATH(EXPR PACKAGE_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR_IN}+0)
MATH(EXPR PACKAGE_VERSION_MINOR ${PACKAGE_VERSION_MINOR_IN}+0)
STRING(REGEX MATCH "[0-9]+" PATCH_STRIPPED ${PACKAGE_VERSION_PATCH_IN})
MATH(EXPR PACKAGE_VERSION_PATCH ${PATCH_STRIPPED}+0)

# Determine if this version is compatible with the requested version
# and whether this is an exact match
# -- Assume FALSE at first
SET(PACKAGE_VERSION_EXACT FALSE)
SET(PACKAGE_VERSION_COMPATIBLE FALSE)
# -- Package is *compatible* if its version is not less than the
#    requested version (by components)
IF(NOT ${PACKAGE_VERSION_MAJOR} LESS ${PACKAGE_FIND_VERSION_MAJOR})
    IF(NOT ${PACKAGE_VERSION_MINOR} LESS ${PACKAGE_FIND_VERSION_MINOR})
        IF(NOT ${PACKAGE_VERSION_PATCH} LESS ${PACKAGE_FIND_VERSION_PATCH})
            SET(PACKAGE_VERSION_COMPATIBLE TRUE)
        ENDIF(NOT ${PACKAGE_VERSION_PATCH} LESS ${PACKAGE_FIND_VERSION_PATCH})
    ENDIF(NOT ${PACKAGE_VERSION_MINOR} LESS ${PACKAGE_FIND_VERSION_MINOR})
ENDIF(NOT ${PACKAGE_VERSION_MAJOR} LESS ${PACKAGE_FIND_VERSION_MAJOR})
# -- Package is *exact* if its version exactly equal to the  requested version
#    (by components)
IF(${PACKAGE_VERSION_MAJOR} EQUAL ${PACKAGE_FIND_VERSION_MAJOR})
    IF(${PACKAGE_VERSION_MINOR} EQUAL ${PACKAGE_FIND_VERSION_MINOR})
        IF(${PACKAGE_VERSION_PATCH} EQUAL ${PACKAGE_FIND_VERSION_PATCH})
            SET(PACKAGE_VERSION_EXACT TRUE)
        ENDIF(${PACKAGE_VERSION_PATCH} EQUAL ${PACKAGE_FIND_VERSION_PATCH})
    ENDIF(${PACKAGE_VERSION_MINOR} EQUAL ${PACKAGE_FIND_VERSION_MINOR})
ENDIF(${PACKAGE_VERSION_MAJOR} EQUAL ${PACKAGE_FIND_VERSION_MAJOR})

# [Debug] Echo output
#MESSAGE(STATUS "[LibCyberRadioConfigVersion] Output")
#MESSAGE(STATUS "* PACKAGE_VERSION=${PACKAGE_VERSION}")
#MESSAGE(STATUS "  * MAJOR=${PACKAGE_VERSION_MAJOR}")
#MESSAGE(STATUS "  * MINOR=${PACKAGE_VERSION_MINOR}")
#MESSAGE(STATUS "  * PATCH=${PACKAGE_VERSION_PATCH}")
#MESSAGE(STATUS "* PACKAGE_VERSION_EXACT=${PACKAGE_VERSION_EXACT}")
#MESSAGE(STATUS "* PACKAGE_VERSION_COMPATIBLE=${PACKAGE_VERSION_COMPATIBLE}")
