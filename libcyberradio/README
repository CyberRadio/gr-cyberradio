#########################################################
# CyberRadio Solutions NDR Control Shared Library
#########################################################

INTRODUCTION
------------
This document describes the CRS Control Shared Library and
how to build it.


REQUIRED SOFTWARE
-----------------
The Shared Library requires the following software to build
successfully:
* CMake 2.6 or later
* Boost headers and libraries, version 1.47 or later
* Doxygen for automatic documentation generation


BUILDING AND INSTALLING (UBUNTU)
--------------------------------
* Create a build folder and change into it.
      mkdir build
      cd build
* Determine which version of Boost to use (either the default version 
  currently installed on the OS, or a custom-built version).  If using a 
  custom version, get the following two directories:
  (1) The top-level directory containing the include/boost header path.  For 
      example, if Boost headers have been installed into 
	  /usr/local/include/boost, then this path is /usr/local.
  (2) The directory where the Boost libraries are located.  For example, if 
      Boost libraries have been installed into /usr/local/lib, then this path 
	  is /usr/local/lib.
* Configure the build.  
  If using the OS-installed Boost libraries, no arguments to CMake are needed.
      cmake ..
  However, if using a custom version, supply CMake with the two paths deter-
  mined in the prior step.
      cmake -DBOOST_INCLUDEDIR=/usr/local -DBOOST_LIBRARYDIR=/usr/local/lib ..
* Make the package.
      make
* Install the library, its headers, and its documentation (if Doxygen is 
  installed).
      sudo make install

In addition, this package supports constructing a Debian installer package 
(*.deb) using the "makedeb" script.  However, the "makedeb" script does not 
support using a custom version of Boost.


BUILDING AND INSTALLING (CENTOS)
--------------------------------
The build procedure for CentOS is similar to the procedure for Ubuntu above, 
with the following exceptions:
* Depending on the OS revision, the OS may not provide an appropriately 
  recent version of the autoconf package through the package management 
  system.  Such a version may be available through other packages.  For 
  example, CentOS 6 makes the most recent autoconf available in package 
  autoconf268.  
  
  If an alternate package is used, keep in mind that the auto-reconfiguration 
  command may have a different name.  For the CentOS 6 example above, the 
  auto-reconfiguration command is "autoreconf268" rather than "autoreconf".

* The default version of Boost may not be sufficiently advanced, so builders 
  will (more often than not) need to rely on a custom Boost installation.

This package does not support building an RPM installer package (*.rpm) at
this time.

